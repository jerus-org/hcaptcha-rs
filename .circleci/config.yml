version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.60"

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>

commands:
  cargo-build:
    parameters:
      rust-version:
        default: "stable"
        type: string
    steps:
      - run:
          name: Check build <<parameters.rust-version>>
          command: |
            cargo +<<parameters.rust-version>> check --all-features --workspace --examples

  cargo-format:
    steps:
      - run:
          name: Check formatting for code
          command: |
            rustfmt --version
            cargo fmt --all -- --check

  cargo-clippy:
    steps:
      - run:
          name: Check idiomatic code use with Clippy
          command: "cargo clippy --workspace --examples --tests --all-features -- -D warnings"

  cargo-test:
    steps:
      - run:
          name: Test all code
          command: "cargo test --workspace --examples"

  cargo-docs:
    steps:
      - run:
          name: Generate the crate documentation
          command: |
            cargo +nightly doc --lib --no-deps --all-features --document-private-items

jobs:
  required-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build
      - cargo-build:
          rust-version: "stable"
      - cargo-build:
          rust-version: <<pipeline.parameters.min-rust-version>>

  optional-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build
      - cargo-build:
          rust-version: "nightly"
      - cargo-build:
          rust-version: "beta"

  basic-tests:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-format
      - cargo-clippy
      - cargo-test

  test-suite:
    parameters:
      test-suite:
        type: string
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - run:
          name: Running test suite <<parameters.test-suite>>
          command: "cargo test -p <<parameters.test-suite>>"

  docs:
    executor: rust-env
    environment:
      RUSTDOCFLAGS: --cfg docsrs -Dwarnings
    steps:
      - checkout
      - cargo-docs
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-test-docs:
    jobs:
      - required-builds
      - optional-builds
      - basic-tests
      - test-suite:
          matrix:
            parameters:
              test-suite:
                [
                  test_suite_default,
                  test_suite_no_default,
                  test_suite_native_only,
                  test_suite_rustls_only,
                  test_suite_trace,
                  test_suite_enterprise,
                ]
          requires:
            - basic-tests
            - required-builds
            - docs
      - docs
