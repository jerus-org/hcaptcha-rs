version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.82"
  docker-tag-suffix:
    type: string
    default: "-wasi"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."
  release-flag:
    type: boolean
    default: false
    description: "If true, the release pipeline will be executed."
  pcu_workspace:
    type: boolean
    default: true
    description: "If true, the make release treats as workspace."
  pcu_verbosity:
    type: string
    default: "-vv"
    description: "Verbosity for pcu application executions."
  pcu_allow_no_pull_request:
    type: enum
    enum:
      - ""
      - "--allow-no-pull-request"
    default: ""
    description: "Optional flag to allows successful exit if no pull request in CI environment"

orbs:
  toolkit: jerus-org/circleci-toolkit@2.12.1

executors:
  rust_env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>><< pipeline.parameters.docker-tag-suffix >>
  base-env:
    docker:
      - image: jerusdp/ci-rust:base

commands:
  pipeline_by_committer:
    description: >
      Makes a post request to the project branch pipeline endpoint to call the
      next pipeline based on the committer of the last commit

    parameters:
      committer:
        type: string
        description: The name of the bot to check for
      branch:
        type: env_var_name
        default: CIRCLE_BRANCH
        description: The branch for the pipeline
      pipeline_flag_if_not:
        type: string
        description: The pipeline flag to set if the last commit was not by the committer
      pipeline_flag_if:
        type: string
        description: The pipeline flag to set if the last commit was by the committer
      pipeline_pcu_verbosity:
        type: string
        default: "-vv"
        description: "Verbosity for pcu application executions."
      pipeline_pcu_allow_no_pull_request:
        type: enum
        enum:
          - ""
          - "--allow-no-pull-request"
        default: ""
        description: "Optional flag to allows successful exit if no pull request in CI environment"
    steps:
      - run:
          name: Check if last commit made by bot
          command: |
            committer=$(git log -1 HEAD --pretty=format:%cn)
            PROJECT_SLUG="gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            BODY='{"branch":"'
            BODY+=${<< parameters.branch >>}
            if [[ "$committer" == "<< parameters.committer >>" ]]; then
              echo "Last committer is the bot"
              BODY+='","parameters":{"<< parameters.pipeline_flag_if >>":true}}'
            else
              echo "Last committer is not the bot"
              BODY+='","parameters":{"<< parameters.pipeline_flag_if_not >>":true'
              BODY+=',"pcu_verbosity":"<< parameters.pipeline_pcu_verbosity >>"'
              if [[ "<< parameters.pipeline_pcu_allow_no_pull_request >>" != "" ]]; then
                BODY+=',"pcu_allow_no_pull_request":"<< parameters.pipeline_pcu_allow_no_pull_request >>"'
              fi
              BODY+='}}'
            fi
            echo $BODY
            curl -u ${CIRCLE_TOKEN}: \
              -X POST \
              --header 'content-type: application/json' \
              -d $BODY \
              https://circleci.com/api/v2/project/$PROJECT_SLUG/pipeline

jobs:
  test-suite:
    parameters:
      test-suite:
        type: string
    executor: rust_env
    steps:
      - checkout
      - run: cargo +stable --version
      - run:
          name: Running test suite <<parameters.test-suite>>
          command: "cargo +stable test -p <<parameters.test-suite>> --test compiletest"

  run_test_program:
    parameters:
      cargo_bin:
        type: string
      cargo_package:
        type: string
      cache_version:
        type: string
    executor: rust_env
    steps:
      - checkout
      - run: cargo +stable --version
      - restore_cache:
          key: << parameters.cache_version >>-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Create the file if it does not exist
          command: |
            set -ex
            if [ ! -f bin/hcaptcha-cli ]; then
                cargo +stable build \
                  --release \
                  --package hcaptcha-cli
                mkdir -p bin
                cp target/release/hcaptcha-cli bin/
            fi
      - save_cache:
          name: save to cache
          paths:
            - bin
          key: << parameters.cache_version >>-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - toolkit/cargo_run:
          cargo_package: << parameters.cargo_package >>
          cargo_bin: << parameters.cargo_bin >>

  choose_pipeline:
    description: >
      Check if the last commit was made by a bot and if so cancel the workflow

    executor:
      name: base-env

    parameters:
      criterion:
        type: enum
        enum: ["committer"]
        default: "committer"
        description: The criterion to use to select between pipeline options
      committer:
        type: string
        default: "Jerus Bot"
        description: The name of the bot to check for
      pipeline_flag_test_failed:
        type: string
        default: "validation-flag"
        description: The pipeline flag to set if the test failed
      pipeline_flag_test_passed:
        type: string
        default: "success-flag"
        description: The pipeline flag to set if the test passed
      pipeline_pcu_verbosity:
        type: string
        default: "-vv"
        description: "Verbosity for pcu application executions."
      pipeline_pcu_allow_no_pull_request:
        type: enum
        enum:
          - ""
          - "--allow-no-pull-request"
        default: ""
        description: "Optional flag to allows successful exit if no pull request in CI environment"
    steps:
      - checkout
      - when:
          condition: << parameters.criterion >> == "committer"
          steps:
            - pipeline_by_committer:
                committer: "<< parameters.committer >>"
                pipeline_flag_if_not: "<< parameters.pipeline_flag_test_failed >>"
                pipeline_flag_if: "<< parameters.pipeline_flag_test_passed >>"
                pipeline_pcu_verbosity: "<< pipeline.parameters.pcu_verbosity >>"
                pipeline_pcu_allow_no_pull_request: "<< pipeline.parameters.pcu_allow_no_pull_request >>"

workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
        - not: << pipeline.parameters.release-flag >>

    jobs:
      - choose_pipeline:
          name: choose pipeline based on committer
          context: bot-check
          pipeline_pcu_verbosity: << pipeline.parameters.pcu_verbosity >>
          pipeline_pcu_allow_no_pull_request: << pipeline.parameters.pcu_allow_no_pull_request >>

  validation:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.release-flag >>
        - << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/label:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context: pcu-app
          filters:
            branches:
              only:
                - main
      - toolkit/code_coverage:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          package: hcaptcha
          requires:
            - toolkit/security
      - toolkit/required_builds:
          name: required builds-<< matrix.cargo_package >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          docker_tag_suffix: << pipeline.parameters.docker-tag-suffix >>
          matrix: &builds
            parameters:
              cargo_package:
                [hcaptcha, hcaptcha_derive, hcaptcha-cli, mock-verifier]
          requires:
            - toolkit/security
      - toolkit/optional_builds:
          name: optional builds-<< matrix.cargo_package >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          docker_tag_suffix: << pipeline.parameters.docker-tag-suffix >>
          matrix:
            <<: *builds
          requires:
            - toolkit/security
      - toolkit/common_tests:
          name: common tests for x86_64-<< matrix.cargo_package >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          matrix:
            <<: *builds
          requires:
            - toolkit/security
      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          lint_flags: "-A deprecated"
          requires:
            - toolkit/security
      - toolkit/test_doc_build:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - run_test_program:
          cargo_package: test-suite-cli
          name: run_test_program-<< matrix.cargo_bin >>
          cache_version: "v1"
          matrix:
            parameters:
              cargo_bin: [long_help, no_options, short_help, simple_captcha]
          requires:
            - toolkit/common_tests
            - toolkit/required_builds
            - toolkit/test_doc_build

      - test-suite:
          matrix:
            parameters:
              test-suite:
                [
                  test-suite-default,
                  test-suite-no-default,
                  test-suite-native-only,
                  test-suite-rustls-only,
                  test-suite-trace,
                  test-suite-enterprise,
                ]
          requires:
            - toolkit/common_tests
            - toolkit/required_builds
            - toolkit/test_doc_build

      - toolkit/test_wasm:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          requires:
            - toolkit/common_tests
            - toolkit/required_builds
            - toolkit/test_doc_build

      - toolkit/security:
          context: SonarCloud

      - toolkit/update_changelog:
          requires:
            - toolkit/idiomatic_rust
            - test-suite
            - run_test_program
            - toolkit/test_wasm
            - toolkit/code_coverage
          context:
            - release
            - bot-check
            - pcu-app
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          pcu_verbosity: << pipeline.parameters.pcu_verbosity >>
          pcu_allow_no_pull_request: << pipeline.parameters.pcu_allow_no_pull_request >>

  on_success:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
        - not: << pipeline.parameters.release-flag >>

    jobs:
      - toolkit/end_success

  release:
    when:
      or:
        - and:
            - << pipeline.parameters.release-flag >>
            - not: << pipeline.parameters.success-flag >>
            - not: << pipeline.parameters.validation-flag >>
        - and:
            - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
            - equal: ["release check", << pipeline.schedule.name >>]
            - not: << pipeline.parameters.success-flag >>
            - not: << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/save_next_version:
          min_rust_version: << pipeline.parameters.min-rust-version >>

      - toolkit/make_release:
          name: cargo release
          requires:
            - toolkit/save_next_version
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          pcu_verbosity: << pipeline.parameters.pcu_verbosity >>
          when_github_release: false
      - toolkit/no_release:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          requires:
            - toolkit/save_next_version:
                - failed

      - toolkit/make_release:
          requires:
            - cargo release
          name: github release for hcaptcha
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          when_cargo_release: false
          pcu_verbosity: << pipeline.parameters.pcu_verbosity >>
          package: hcaptcha
