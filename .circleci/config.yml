version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.75"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."

orbs:
  toolkit: jerus-org/circleci-toolkit@1.6.1

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>
  wasi-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>-wasi
  base-env:
    docker:
      - image: jerusdp/ci-rust:base

commands:
  cargo_build:
    parameters:
      rust_version:
        default: "stable"
        type: string
        description: "The rust compiler version to use"
      cargo_args:
        type: string
        default: ""
        description: "Additional parameters to pass to cargo build"
      cargo_target:
        type: string
        default: ""
        description: "Target to pass to cargo build"
    steps:
      - run:
          name: Check build <<parameters.rust_version>>
          command: |
            cargo +<<parameters.rust_version>> build --all-features <<parameters.cargo_args>> << parameters.cargo_target >>

  cargo_test:
    parameters:
      rust_version:
        default: "stable"
        type: string
        description: "The rust compiler version to use"
      cargo_args:
        type: string
        default: ""
        description: "Additional parameters to pass to cargo test"
      cargo_target:
        type: string
        default: ""
        description: "Target to pass to cargo test"
    steps:
      - run:
          name: Common tests <<parameters.rust_version>>
          command: |
            cargo +<<parameters.rust_version>> test --all-features <<parameters.cargo_args>> << parameters.cargo_target >>

jobs:
  rust-versions:
    executor: rust-env
    steps:
      - run: rustup show

  test-suite:
    parameters:
      test-suite:
        type: string
    executor: rust-env
    steps:
      - checkout
      - run: cargo +stable --version
      - run:
          name: Running test suite <<parameters.test-suite>>
          command: "cargo +stable test -p <<parameters.test-suite>> --test compiletest"

  required_builds:
    executor: wasi-env
    parameters:
      min_rust_version:
        type: string
        description: "Required: The minimum version of the rust compiler to use"
      cargo_args:
        type: string
        default: ""
        description: "Additional parameters to pass to cargo build"
      cargo_target:
        type: string
        default: ""
        description: "Target to pass to cargo build"
      min_cargo_target:
        type: string
        default: ""
        description: "Target to pass to cargo build"
    steps:
      - checkout
      - run:
          name: Check rust version for code
          command: cargo --version
      - run:
          name: Installed targets
          command: rustup target list --installed
      - cargo_build:
          rust_version: "stable"
          cargo_args: <<parameters.cargo_args>>
          cargo_target: << parameters.cargo_target >>

      - cargo_build:
          rust_version: "<<parameters.min_rust_version>>"
          cargo_args: <<parameters.cargo_args>>
          cargo_target: << parameters.min_cargo_target >>

  optional_builds:
    parameters:
      min_rust_version:
        type: string
        description: "Required: The minimum version of the rust compiler to use"
      cargo_args:
        type: string
        default: ""
        description: "Additional parameters to pass to cargo build"
      cargo_target:
        type: string
        default: ""
        description: "Target to pass to cargo build"
      use_executor:
        type: enum
        enum: ["rust-env", "wasi-env"]
        description: "Required: The executor to use for the build"

    executor: << parameters.use_executor >>
    steps:
      - checkout
      - run:
          name: Check rust version for code
          command: cargo --version
      - cargo_build:
          rust_version: "nightly"
          cargo_args: << parameters.cargo_args >>
          cargo_target: << parameters.cargo_target >>
      - cargo_build:
          rust_version: "beta"
          cargo_args: <<parameters.cargo_args>>
          cargo_target: << parameters.cargo_target >>

  common_tests:
    parameters:
      min_rust_version:
        type: string
        description: "Required: The minimum version of the rust compiler to use"
      cargo_args:
        type: string
        default: ""
        description: "Additional parameters to pass to cargo build"
      cargo_target:
        type: string
        default: ""
        description: "Target to pass to cargo build"
      use_executor:
        type: enum
        enum: ["rust-env", "wasi-env"]
        description: "Required: The executor to use for the build"
    executor: << parameters.use_executor >>
    steps:
      - checkout
      - run:
          name: Check rust version for code
          command: cargo --version
      - run:
          name: Check formatting for code
          command: |
            rustfmt --version
            cargo fmt --all -- --check
      - cargo_test:
          rust_version: stable
          cargo_args: << parameters.cargo_args >>
          cargo_target: << parameters.cargo_target >>

workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/choose_pipeline:
          name: choose pipeline based on committer
          context: bot-check

  validation:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/label:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context: pcu-app
          filters:
            branches:
              only:
                - main
      - rust-versions
      - required_builds:
          name: required builds for x86_64
          min_rust_version: << pipeline.parameters.min-rust-version >>
          matrix:
            parameters:
              cargo_args: [-p hcaptcha, -p hcaptcha-cli]
      - required_builds:
          name: required builds for wasi
          min_rust_version: << pipeline.parameters.min-rust-version >>
          cargo_args: -p hcaptcha-cli
          cargo_target: --target wasm32-wasip1
          min_cargo_target: --target wasm32-wasi
      - optional_builds:
          name: optional builds for x86_64
          min_rust_version: << pipeline.parameters.min-rust-version >>
          use_executor: rust-env
          matrix:
            parameters:
              cargo_args: [-p hcaptcha, -p hcaptcha-cli]
      - optional_builds:
          name: optional builds for wasi
          min_rust_version: << pipeline.parameters.min-rust-version >>
          use_executor: wasi-env
          cargo_args: -p hcaptcha-cli
          cargo_target: --target wasm32-wasip1
      - common_tests:
          name: common tests for x86_64
          min_rust_version: << pipeline.parameters.min-rust-version >>
          use_executor: rust-env
          matrix:
            parameters:
              cargo_args: [-p hcaptcha, -p hcaptcha-cli]
      - common_tests:
          name: common_tests_wasi
          min_rust_version: << pipeline.parameters.min-rust-version >>
          use_executor: wasi-env
          cargo_args: -p hcaptcha-cli
          cargo_target: --target wasm32-wasip1

      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/test_doc_build:
          min_rust_version: << pipeline.parameters.min-rust-version >>

      - test-suite:
          matrix:
            parameters:
              test-suite:
                [
                  test_suite_default,
                  test_suite_no_default,
                  test_suite_native_only,
                  test_suite_rustls_only,
                  test_suite_trace,
                  test_suite_enterprise,
                ]
          requires:
            - common_tests
            - required_builds
            - required builds for wasi
            - toolkit/test_doc_build

      - toolkit/security

      - toolkit/update_changelog:
          requires:
            - toolkit/idiomatic_rust
            - test-suite
            - common_tests_wasi
          context:
            - release
            - bot-check
            - pcu-app
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>

  on_success:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/end_success

  release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release check", << pipeline.schedule.name >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
    jobs:
      - toolkit/make_release:
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
