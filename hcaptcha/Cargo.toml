[package]
name = "hcaptcha"
description = """
hCaptcha client response verification. Validate the hCaptcha response submitted from to your server from the client.
"""
version = "3.0.6"
authors = ["Jeremiah Russell <jrussell@jerus.ie>"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/jerusdp/hcaptcha-rs"
edition = "2021"
rust-version = "1.75"
readme = "README.md"
documentation = "https://docs.rs/hcaptcha"
categories = ["web-programming"]
keywords = ["hcaptcha", "captcha", "security", "backend", "protection"]
include = [
    "**/*.rs",
    "Cargo.toml",
    "README.md",
    "LICENSE-APACHE",
    "LICENSE-MIT",
    "CHANGES.md",
]

[features]
default = ["ext", "rustls-backend"]
rustls-backend = ["reqwest/rustls-tls"]
nativetls-backend = ["reqwest/native-tls"]
ext = ["hex"]
enterprise = []
trace = ["tracing"]
nightly = []

[dependencies]
async-trait.workspace = true
hex = { workspace = true, optional = true }
hcaptcha_derive = { version = "3.0.6", path = "../hcaptcha_derive" }
reqwest.workspace = true
serde_json.workspace = true
serde_urlencoded.workspace = true
serde.workspace = true
thiserror.workspace = true
tracing = { workspace = true, optional = true }
uuid.workspace = true
url.workspace = true
# tokio.workspace = true

[dev-dependencies]
chrono.workspace = true
claims.workspace = true
mockd.workspace = true
hex.workspace = true
itertools.workspace = true
lambda_runtime.workspace = true
log.workspace = true
rand.workspace = true
tokio.workspace = true
simple_logger.workspace = true
tracing.workspace = true
tracing-appender.workspace = true
tracing-bunyan-formatter.workspace = true
tracing-log.workspace = true
tracing-subscriber.workspace = true
tracing-test.workspace = true
wiremock.workspace = true
serde_test = "1.0.177"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[target.'cfg(target_arch = "wasm32")'.dependencies]
uuid = { workspace = true, features = ["js"] }
