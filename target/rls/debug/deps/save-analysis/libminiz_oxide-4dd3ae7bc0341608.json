{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3","program":"/home/gorta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","miniz_oxide","--edition=2018","/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=4dd3ae7bc0341608","-C","extra-filename=-4dd3ae7bc0341608","--out-dir","/home/gorta/garden/recaptcha-rs/target/rls/debug/deps","-L","dependency=/home/gorta/garden/recaptcha-rs/target/rls/debug/deps","--extern","adler=/home/gorta/garden/recaptcha-rs/target/rls/debug/deps/libadler-92151b1f98ffff92.rmeta","--cap-lints","allow","--cfg","has_alloc","--error-format=json","--sysroot","/home/gorta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gorta/garden/recaptcha-rs/target/rls/debug/deps/libminiz_oxide-4dd3ae7bc0341608.rmeta"},"prelude":{"crate_id":{"name":"miniz_oxide","disambiguator":[14356084282496786124,2477007328526075841]},"crate_root":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src","external_crates":[{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16851962707842592855,4932765248485690217]}},{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3049591816127030880,10952373373500329976]}},{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11587085401131637304,2097967498245787009]}},{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[697141649018154369,16548652339936893370]}},{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/shared.rs","num":5,"id":{"name":"adler","disambiguator":[5187650568935261061,13495781184541923472]}}],"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":0,"byte_end":4675,"line_start":1,"line_end":167,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":553},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1235,"byte_end":1249,"line_start":41,"line_end":41,"column_start":24,"column_end":38},"alias_span":null,"name":"mz_adler32_oxide","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":549},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1295,"byte_end":1310,"line_start":42,"line_end":42,"column_start":25,"column_end":40},"alias_span":null,"name":"MZ_ADLER32_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":550},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1312,"byte_end":1334,"line_start":42,"line_end":42,"column_start":42,"column_end":64},"alias_span":null,"name":"MZ_DEFAULT_WINDOW_BITS","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":0,"byte_end":4675,"line_start":1,"line_end":167,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":333},{"krate":0,"index":547},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":861},{"krate":0,"index":892},{"krate":0,"index":891},{"krate":0,"index":889},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":880},{"krate":0,"index":558},{"krate":0,"index":894},{"krate":0,"index":916},{"krate":0,"index":915},{"krate":0,"index":913},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":904},{"krate":0,"index":918},{"krate":0,"index":952},{"krate":0,"index":951},{"krate":0,"index":949},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":940},{"krate":0,"index":954},{"krate":0,"index":971},{"krate":0,"index":970},{"krate":0,"index":968},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":959},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":973},{"krate":0,"index":990},{"krate":0,"index":989},{"krate":0,"index":987},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":977},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568}],"decl_id":null,"docs":" A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\n DEFLATE/zlib encoder/decoder.\n The plan for this crate is to be used as a back-end for the\n [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the\n need to depend on a C library.","sig":null,"attributes":[{"value":"! A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"! DEFLATE/zlib encoder/decoder.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":81,"byte_end":114,"line_start":2,"line_end":2,"column_start":1,"column_end":34}},{"value":"! The plan for this crate is to be used as a back-end for the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":115,"byte_end":178,"line_start":3,"line_end":3,"column_start":1,"column_end":64}},{"value":"! [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":179,"byte_end":266,"line_start":4,"line_end":4,"column_start":1,"column_end":88}},{"value":"! need to depend on a C library.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":267,"byte_end":301,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":302,"byte_end":305,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":306,"byte_end":317,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"! ## Simple compression/decompression:","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":318,"byte_end":358,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"! ``` rust","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":359,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":372,"byte_end":375,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! use miniz_oxide::inflate::decompress_to_vec;","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":376,"byte_end":424,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"! use miniz_oxide::deflate::compress_to_vec;","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":425,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! fn roundtrip(data: &[u8]) {","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":476,"byte_end":507,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"!     let compressed = compress_to_vec(data, 6);","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":508,"byte_end":558,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"!     let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":559,"byte_end":659,"line_start":16,"line_end":16,"column_start":1,"column_end":101}},{"value":"! #   let _ = decompressed;","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":660,"byte_end":689,"line_start":17,"line_end":17,"column_start":1,"column_end":30}},{"value":"! }","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":690,"byte_end":695,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":696,"byte_end":699,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! # roundtrip(b\"Test_data test data lalalal blabla\");","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":700,"byte_end":755,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":756,"byte_end":759,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":760,"byte_end":767,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"allow(warnings)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":769,"byte_end":788,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":789,"byte_end":812,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"no_std","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":871,"byte_end":877,"line_start":26,"line_end":26,"column_start":59,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"deflate","qualname":"::deflate","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":992},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":39},{"krate":0,"index":314},{"krate":0,"index":329},{"krate":0,"index":674},{"krate":0,"index":705},{"krate":0,"index":704},{"krate":0,"index":702},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":693},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" This module contains functionality for compression.\n","sig":null,"attributes":[{"value":"! This module contains functionality for compression.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":4677,"byte_end":4732,"line_start":1,"line_end":1,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":39},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::deflate::core","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":69},{"krate":0,"index":584},{"krate":0,"index":589},{"krate":0,"index":587},{"krate":0,"index":71},{"krate":0,"index":590},{"krate":0,"index":618},{"krate":0,"index":617},{"krate":0,"index":615},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":606},{"krate":0,"index":620},{"krate":0,"index":645},{"krate":0,"index":644},{"krate":0,"index":642},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":633},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":647},{"krate":0,"index":672},{"krate":0,"index":671},{"krate":0,"index":669},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":660},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":116},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":148},{"krate":0,"index":152},{"krate":0,"index":158},{"krate":0,"index":164},{"krate":0,"index":171},{"krate":0,"index":177},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":219},{"krate":0,"index":240},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":260},{"krate":0,"index":278},{"krate":0,"index":283},{"krate":0,"index":290},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313}],"decl_id":null,"docs":" Streaming compression functionality.\n","sig":null,"attributes":[{"value":"! Streaming compression functionality.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":13343,"byte_end":13383,"line_start":1,"line_end":1,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":71},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22205,"byte_end":22218,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"name":"deflate_flags","qualname":"::deflate::core::deflate_flags","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":72},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22274,"byte_end":22297,"line_start":170,"line_end":170,"column_start":15,"column_end":38},"name":"TDEFL_WRITE_ZLIB_HEADER","qualname":"::deflate::core::deflate_flags::TDEFL_WRITE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Whether to use a zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Whether to use a zlib wrapper.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22225,"byte_end":22259,"line_start":169,"line_end":169,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":73},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22380,"byte_end":22401,"line_start":172,"line_end":172,"column_start":15,"column_end":36},"name":"TDEFL_COMPUTE_ADLER32","qualname":"::deflate::core::deflate_flags::TDEFL_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we compute the adler32 checksum.\n","sig":null,"attributes":[{"value":"/ Should we compute the adler32 checksum.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22322,"byte_end":22365,"line_start":171,"line_end":171,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":74},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22574,"byte_end":22599,"line_start":175,"line_end":175,"column_start":15,"column_end":40},"name":"TDEFL_GREEDY_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_GREEDY_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\n bytes to check for better matches.)\n","sig":null,"attributes":[{"value":"/ Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22426,"byte_end":22515,"line_start":173,"line_end":173,"column_start":5,"column_end":94}},{"value":"/ bytes to check for better matches.)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22520,"byte_end":22559,"line_start":174,"line_end":174,"column_start":5,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":75},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22753,"byte_end":22788,"line_start":178,"line_end":178,"column_start":15,"column_end":50},"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_NONDETERMINISTIC_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\n this flag is ignored.\n","sig":null,"attributes":[{"value":"/ Used in miniz to skip zero-initializing hash and dict. We don't do this here, so","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22624,"byte_end":22708,"line_start":176,"line_end":176,"column_start":5,"column_end":89}},{"value":"/ this flag is ignored.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22713,"byte_end":22738,"line_start":177,"line_end":177,"column_start":5,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":76},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22875,"byte_end":22892,"line_start":180,"line_end":180,"column_start":15,"column_end":32},"name":"TDEFL_RLE_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_RLE_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 0.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 0.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22813,"byte_end":22860,"line_start":179,"line_end":179,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":77},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22984,"byte_end":23004,"line_start":182,"line_end":182,"column_start":15,"column_end":35},"name":"TDEFL_FILTER_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_FILTER_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only use matches that are at least 6 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 6 bytes long.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":22917,"byte_end":22969,"line_start":181,"line_end":181,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23187,"byte_end":23216,"line_start":185,"line_end":185,"column_start":15,"column_end":44},"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_STATIC_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output static blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output static blocks. (Blocks using the default huffman codes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23029,"byte_end":23123,"line_start":183,"line_end":183,"column_start":5,"column_end":99}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23128,"byte_end":23172,"line_start":184,"line_end":184,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23320,"byte_end":23346,"line_start":187,"line_end":187,"column_start":15,"column_end":41},"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_RAW_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output raw/uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output raw/uncompressed blocks.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23241,"byte_end":23305,"line_start":186,"line_end":186,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":591},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23635,"byte_end":23642,"line_start":197,"line_end":197,"column_start":5,"column_end":12},"name":"Default","qualname":"::deflate::core::CompressionStrategy::Default","value":"CompressionStrategy::Default","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" Don't use any of the special strategies.\n","sig":null,"attributes":[{"value":"/ Don't use any of the special strategies.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23586,"byte_end":23630,"line_start":196,"line_end":196,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":594},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23709,"byte_end":23717,"line_start":199,"line_end":199,"column_start":5,"column_end":13},"name":"Filtered","qualname":"::deflate::core::CompressionStrategy::Filtered","value":"CompressionStrategy::Filtered","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" Only use matches that are at least 5 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 5 bytes long.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23652,"byte_end":23704,"line_start":198,"line_end":198,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":597},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23793,"byte_end":23804,"line_start":201,"line_end":201,"column_start":5,"column_end":16},"name":"HuffmanOnly","qualname":"::deflate::core::CompressionStrategy::HuffmanOnly","value":"CompressionStrategy::HuffmanOnly","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" Don't look for matches, only huffman encode the literals.\n","sig":null,"attributes":[{"value":"/ Don't look for matches, only huffman encode the literals.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23727,"byte_end":23788,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":600},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23899,"byte_end":23902,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"RLE","qualname":"::deflate::core::CompressionStrategy::RLE","value":"CompressionStrategy::RLE","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 1, i.e do run-length encoding only.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 1, i.e do run-length encoding only.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23814,"byte_end":23894,"line_start":202,"line_end":202,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":603},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24039,"byte_end":24044,"line_start":206,"line_end":206,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::deflate::core::CompressionStrategy::Fixed","value":"CompressionStrategy::Fixed","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" Only use static/fixed blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Only use static/fixed blocks. (Blocks using the default huffman codes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23912,"byte_end":23985,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23990,"byte_end":24034,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":590},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23560,"byte_end":23579,"line_start":195,"line_end":195,"column_start":10,"column_end":29},"name":"CompressionStrategy","qualname":"::deflate::core::CompressionStrategy","value":"pub enum CompressionStrategy {\n\n    /// Don't use any of the special strategies.\n    Default = ,\n\n    /// Only use matches that are at least 5 bytes long.\n    Filtered = ,\n\n    /// Don't look for matches, only huffman encode the literals.\n    HuffmanOnly = ,\n\n    /// Only look for matches with a distance of 1, i.e do run-length encoding only.\n    RLE = ,\n\n    /// Only use static/fixed blocks. (Blocks using the default huffman codes\n    /// specified in the deflate specification.)\n    Fixed = ,\n}","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":603}],"decl_id":null,"docs":" Strategy setting for compression.","sig":null,"attributes":[{"value":"/ Strategy setting for compression.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23370,"byte_end":23407,"line_start":190,"line_end":190,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23408,"byte_end":23411,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ The non-default settings offer some special-case compression variants.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23412,"byte_end":23486,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"repr(i32)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":23487,"byte_end":23499,"line_start":193,"line_end":193,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":621},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24261,"byte_end":24265,"line_start":214,"line_end":214,"column_start":5,"column_end":9},"name":"None","qualname":"::deflate::core::TDEFLFlush::None","value":"TDEFLFlush::None","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" Compress as much as there is space for, and then return\n waiting for more input.\n","sig":null,"attributes":[{"value":"/ Compress as much as there is space for, and then return","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24165,"byte_end":24224,"line_start":212,"line_end":212,"column_start":5,"column_end":64}},{"value":"/ waiting for more input.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24229,"byte_end":24256,"line_start":213,"line_end":213,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":624},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24344,"byte_end":24348,"line_start":216,"line_end":216,"column_start":5,"column_end":9},"name":"Sync","qualname":"::deflate::core::TDEFLFlush::Sync","value":"TDEFLFlush::Sync","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" Try to flush the current data and output an empty raw block.\n","sig":null,"attributes":[{"value":"/ Try to flush the current data and output an empty raw block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24275,"byte_end":24339,"line_start":215,"line_end":215,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":627},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24474,"byte_end":24478,"line_start":219,"line_end":219,"column_start":5,"column_end":9},"name":"Full","qualname":"::deflate::core::TDEFLFlush::Full","value":"TDEFLFlush::Full","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" Same as sync, but reset the dictionary so that the following data does not depend\n on previous data.\n","sig":null,"attributes":[{"value":"/ Same as sync, but reset the dictionary so that the following data does not depend","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24358,"byte_end":24443,"line_start":217,"line_end":217,"column_start":5,"column_end":90}},{"value":"/ on previous data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24448,"byte_end":24469,"line_start":218,"line_end":218,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":630},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24540,"byte_end":24546,"line_start":221,"line_end":221,"column_start":5,"column_end":11},"name":"Finish","qualname":"::deflate::core::TDEFLFlush::Finish","value":"TDEFLFlush::Finish","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" Try to flush everything and end the stream.\n","sig":null,"attributes":[{"value":"/ Try to flush everything and end the stream.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24488,"byte_end":24535,"line_start":220,"line_end":220,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":620},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24148,"byte_end":24158,"line_start":211,"line_end":211,"column_start":10,"column_end":20},"name":"TDEFLFlush","qualname":"::deflate::core::TDEFLFlush","value":"pub enum TDEFLFlush {\n\n    /// Compress as much as there is space for, and then return\n    /// waiting for more input.\n    None = ,\n\n    /// Try to flush the current data and output an empty raw block.\n    Sync = ,\n\n    /// Same as sync, but reset the dictionary so that the following data does not depend\n    /// on previous data.\n    Full = ,\n\n    /// Try to flush everything and end the stream.\n    Finish = ,\n}","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":630}],"decl_id":null,"docs":" A list of deflate flush types.\n","sig":null,"attributes":[{"value":"/ A list of deflate flush types.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24053,"byte_end":24087,"line_start":209,"line_end":209,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24954,"byte_end":24957,"line_start":237,"line_end":237,"column_start":12,"column_end":15},"name":"new","qualname":"<TDEFLFlush>::new","value":"pub fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":648},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":25350,"byte_end":25358,"line_start":252,"line_end":252,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::deflate::core::TDEFLStatus::BadParam","value":"TDEFLStatus::BadParam","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":651},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":25369,"byte_end":25381,"line_start":253,"line_end":253,"column_start":5,"column_end":17},"name":"PutBufFailed","qualname":"::deflate::core::TDEFLStatus::PutBufFailed","value":"TDEFLStatus::PutBufFailed","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":654},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":25392,"byte_end":25396,"line_start":254,"line_end":254,"column_start":5,"column_end":9},"name":"Okay","qualname":"::deflate::core::TDEFLStatus::Okay","value":"TDEFLStatus::Okay","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":657},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":25406,"byte_end":25410,"line_start":255,"line_end":255,"column_start":5,"column_end":9},"name":"Done","qualname":"::deflate::core::TDEFLStatus::Done","value":"TDEFLStatus::Done","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":647},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":25332,"byte_end":25343,"line_start":251,"line_end":251,"column_start":10,"column_end":21},"name":"TDEFLStatus","qualname":"::deflate::core::TDEFLStatus","value":"pub enum TDEFLStatus { BadParam = , PutBufFailed = , Okay = , Done = , }","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"/ Return status codes.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":25234,"byte_end":25258,"line_start":248,"line_end":248,"column_start":1,"column_end":25}},{"value":"repr(i32)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":25259,"byte_end":25271,"line_start":249,"line_end":249,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":111},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":29798,"byte_end":29813,"line_start":394,"line_end":394,"column_start":12,"column_end":27},"name":"CompressorOxide","qualname":"::deflate::core::CompressorOxide","value":"CompressorOxide {  }","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Main compression struct.\n","sig":null,"attributes":[{"value":"/ Main compression struct.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":29758,"byte_end":29786,"line_start":393,"line_end":393,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30111,"byte_end":30114,"line_start":406,"line_end":406,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressorOxide>::new","value":"pub fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CompressorOxide` with the given flags.","sig":null,"attributes":[{"value":"/ Create a new `CompressorOxide` with the given flags.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":29938,"byte_end":29994,"line_start":402,"line_end":402,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":29999,"byte_end":30002,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30007,"byte_end":30018,"line_start":404,"line_end":404,"column_start":5,"column_end":16}},{"value":"/ This function may be changed to take different parameters in the future.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30023,"byte_end":30099,"line_start":405,"line_end":405,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30520,"byte_end":30527,"line_start":418,"line_end":418,"column_start":12,"column_end":19},"name":"adler32","qualname":"<CompressorOxide>::adler32","value":"pub fn adler32(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the adler32 checksum of the currently encoded data.\n","sig":null,"attributes":[{"value":"/ Get the adler32 checksum of the currently encoded data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30449,"byte_end":30508,"line_start":417,"line_end":417,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30702,"byte_end":30720,"line_start":424,"line_end":424,"column_start":12,"column_end":30},"name":"prev_return_status","qualname":"<CompressorOxide>::prev_return_status","value":"pub fn prev_return_status(&Self) -> TDEFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Get the return status of the previous [`compress`](fn.compress.html)\n call with this compressor.\n","sig":null,"attributes":[{"value":"/ Get the return status of the previous [`compress`](fn.compress.html)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30583,"byte_end":30655,"line_start":422,"line_end":422,"column_start":5,"column_end":77}},{"value":"/ call with this compressor.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30660,"byte_end":30690,"line_start":423,"line_end":423,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30959,"byte_end":30964,"line_start":432,"line_end":432,"column_start":12,"column_end":17},"name":"flags","qualname":"<CompressorOxide>::flags","value":"pub fn flags(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Get the raw compressor flags.","sig":null,"attributes":[{"value":"/ Get the raw compressor flags.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30795,"byte_end":30828,"line_start":428,"line_end":428,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30833,"byte_end":30836,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30841,"byte_end":30852,"line_start":430,"line_end":430,"column_start":5,"column_end":16}},{"value":"/ This function may be deprecated or changed in the future to use more rust-style flags.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":30857,"byte_end":30947,"line_start":431,"line_end":431,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31117,"byte_end":31128,"line_start":437,"line_end":437,"column_start":12,"column_end":23},"name":"data_format","qualname":"<CompressorOxide>::data_format","value":"pub fn data_format(&Self) -> DataFormat","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the compressor is wrapping the data in a zlib format or not.\n","sig":null,"attributes":[{"value":"/ Returns whether the compressor is wrapping the data in a zlib format or not.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31025,"byte_end":31105,"line_start":436,"line_end":436,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31438,"byte_end":31443,"line_start":448,"line_end":448,"column_start":12,"column_end":17},"name":"reset","qualname":"<CompressorOxide>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the state of the compressor, keeping the same parameters.","sig":null,"attributes":[{"value":"/ Reset the state of the compressor, keeping the same parameters.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31311,"byte_end":31378,"line_start":445,"line_end":445,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31383,"byte_end":31386,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ This avoids re-allocating data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31391,"byte_end":31426,"line_start":447,"line_end":447,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31979,"byte_end":32000,"line_start":462,"line_end":462,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<CompressorOxide>::set_compression_level","value":"pub fn set_compression_level(&mut Self, CompressionLevel)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31730,"byte_end":31778,"line_start":457,"line_end":457,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31783,"byte_end":31786,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compresson has started is supported.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31791,"byte_end":31864,"line_start":459,"line_end":459,"column_start":5,"column_end":78}},{"value":"/ # Notes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31869,"byte_end":31880,"line_start":460,"line_end":460,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":31885,"byte_end":31967,"line_start":461,"line_end":461,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32419,"byte_end":32444,"line_start":472,"line_end":472,"column_start":12,"column_end":37},"name":"set_compression_level_raw","qualname":"<CompressorOxide>::set_compression_level_raw","value":"pub fn set_compression_level_raw(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor using an integer value.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor using an integer value.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32147,"byte_end":32218,"line_start":467,"line_end":467,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32223,"byte_end":32226,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compresson has started is supported.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32231,"byte_end":32304,"line_start":469,"line_end":469,"column_start":5,"column_end":78}},{"value":"/ # Notes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32309,"byte_end":32320,"line_start":470,"line_end":470,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32325,"byte_end":32407,"line_start":471,"line_end":471,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":33036,"byte_end":33056,"line_start":486,"line_end":486,"column_start":12,"column_end":32},"name":"set_format_and_level","qualname":"<CompressorOxide>::set_format_and_level","value":"pub fn set_format_and_level(&mut Self, DataFormat, u8)","parent":null,"children":[],"decl_id":null,"docs":" Update the compression settings of the compressor.","sig":null,"attributes":[{"value":"/ Update the compression settings of the compressor.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32571,"byte_end":32625,"line_start":477,"line_end":477,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32630,"byte_end":32633,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ Changing the `DataFormat` after compression has started will result in","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32638,"byte_end":32712,"line_start":479,"line_end":479,"column_start":5,"column_end":79}},{"value":"/ a corrupted stream.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32717,"byte_end":32740,"line_start":480,"line_end":480,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32745,"byte_end":32748,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32753,"byte_end":32764,"line_start":482,"line_end":482,"column_start":5,"column_end":16}},{"value":"/ This function mainly intented for setting the initial settings after e.g creating with","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32769,"byte_end":32859,"line_start":483,"line_end":483,"column_start":5,"column_end":95}},{"value":"/ `default` or after calling `CompressorOxide::reset()`, and behaviour may be changed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32864,"byte_end":32951,"line_start":484,"line_end":484,"column_start":5,"column_end":92}},{"value":"/ to disallow calling it after starting compression in the future.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":32956,"byte_end":33024,"line_start":485,"line_end":485,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":33960,"byte_end":33972,"line_start":514,"line_end":514,"column_start":12,"column_end":24},"name":"CallbackFunc","qualname":"::deflate::core::CallbackFunc","value":"CallbackFunc { put_buf_func }","parent":null,"children":[{"krate":0,"index":130}],"decl_id":null,"docs":" Callback function and user used in `compress_to_output`.\n","sig":null,"attributes":[{"value":"/ Callback function and user used in `compress_to_output`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":33888,"byte_end":33948,"line_start":513,"line_end":513,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":130},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":33987,"byte_end":33999,"line_start":515,"line_end":515,"column_start":9,"column_end":21},"name":"put_buf_func","qualname":"::deflate::core::CallbackFunc::put_buf_func","value":"&'a mut (dyn for<'r> core::ops::FnMut(&'r [u8]) -> bool + 'a)","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":308},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92768,"byte_end":92776,"line_start":2180,"line_end":2180,"column_start":8,"column_end":16},"name":"compress","qualname":"::deflate::core::compress","value":"pub fn compress(&mut CompressorOxide, &[u8], &mut [u8], TDEFLFlush)\n-> (TDEFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Tries to compress as much as possible from `in_buf` and\n puts compressed output into `out_buf`.","sig":null,"attributes":[{"value":"/ Main compression function. Tries to compress as much as possible from `in_buf` and","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92257,"byte_end":92343,"line_start":2170,"line_end":2170,"column_start":1,"column_end":87}},{"value":"/ puts compressed output into `out_buf`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92344,"byte_end":92386,"line_start":2171,"line_end":2171,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92387,"byte_end":92390,"line_start":2172,"line_end":2172,"column_start":1,"column_end":4}},{"value":"/ The value of `flush` determines if the compressor should attempt to flush all output","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92391,"byte_end":92479,"line_start":2173,"line_end":2173,"column_start":1,"column_end":89}},{"value":"/ and alternatively try to finish the stream.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92480,"byte_end":92527,"line_start":2174,"line_end":2174,"column_start":1,"column_end":48}},{"value":"/ Should be `TDeflflush::Finish` on the final call.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92528,"byte_end":92581,"line_start":2175,"line_end":2175,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92582,"byte_end":92585,"line_start":2176,"line_end":2176,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92586,"byte_end":92599,"line_start":2177,"line_end":2177,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92600,"byte_end":92689,"line_start":2178,"line_end":2178,"column_start":1,"column_end":90}},{"value":"/ in the input buffer and the current position in the output buffer.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":92690,"byte_end":92760,"line_start":2179,"line_end":2179,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93328,"byte_end":93346,"line_start":2201,"line_end":2201,"column_start":8,"column_end":26},"name":"compress_to_output","qualname":"::deflate::core::compress_to_output","value":"pub fn compress_to_output<impl FnMut(&[u8]) -> bool: FnMut(&[u8]) ->\n                          bool>(&mut CompressorOxide, &[u8], TDEFLFlush,\n                                impl FnMut(&[u8]) -> bool)\n-> (TDEFLStatus, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Callbacks output.","sig":null,"attributes":[{"value":"/ Main compression function. Callbacks output.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93026,"byte_end":93074,"line_start":2193,"line_end":2193,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93075,"byte_end":93078,"line_start":2194,"line_end":2194,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93079,"byte_end":93092,"line_start":2195,"line_end":2195,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93093,"byte_end":93182,"line_start":2196,"line_end":2196,"column_start":1,"column_end":90}},{"value":"/ in the input buffer.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93183,"byte_end":93207,"line_start":2197,"line_end":2197,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93208,"byte_end":93211,"line_start":2198,"line_end":2198,"column_start":1,"column_end":4}},{"value":"/ The caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93212,"byte_end":93305,"line_start":2199,"line_end":2199,"column_start":1,"column_end":94}},{"value":"/ behaviour.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":93306,"byte_end":93320,"line_start":2200,"line_end":2200,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":313},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":97315,"byte_end":97348,"line_start":2320,"line_end":2320,"column_start":8,"column_end":41},"name":"create_comp_flags_from_zip_params","qualname":"::deflate::core::create_comp_flags_from_zip_params","value":"pub fn create_comp_flags_from_zip_params(i32, i32, i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Create a set of compression flags using parameters used by zlib and other compressors.\n Mainly intented for use with transition from c libraries as it deals with raw integers.","sig":null,"attributes":[{"value":"/ Create a set of compression flags using parameters used by zlib and other compressors.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":96666,"byte_end":96756,"line_start":2308,"line_end":2308,"column_start":1,"column_end":91}},{"value":"/ Mainly intented for use with transition from c libraries as it deals with raw integers.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":96757,"byte_end":96848,"line_start":2309,"line_end":2309,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":96849,"byte_end":96852,"line_start":2310,"line_end":2310,"column_start":1,"column_end":4}},{"value":"/ # Parameters","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":96853,"byte_end":96869,"line_start":2311,"line_end":2311,"column_start":1,"column_end":17}},{"value":"/ `level` determines compression level. Clamped to maximum of 10. Negative values result in","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":96870,"byte_end":96963,"line_start":2312,"line_end":2312,"column_start":1,"column_end":94}},{"value":"/ `Compressionlevel::DefaultLevel`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":96964,"byte_end":97001,"line_start":2313,"line_end":2313,"column_start":1,"column_end":38}},{"value":"/ `window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":97002,"byte_end":97097,"line_start":2314,"line_end":2314,"column_start":1,"column_end":96}},{"value":"/ stream.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":97098,"byte_end":97109,"line_start":2315,"line_end":2315,"column_start":1,"column_end":12}},{"value":"/ `strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":97110,"byte_end":97207,"line_start":2316,"line_end":2316,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":97208,"byte_end":97211,"line_start":2317,"line_end":2317,"column_start":1,"column_end":4}},{"value":"/ # Notes","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":97212,"byte_end":97223,"line_start":2318,"line_end":2318,"column_start":1,"column_end":12}},{"value":"/ This function may be removed or moved to the `miniz_oxide_c_api` in the future.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":97224,"byte_end":97307,"line_start":2319,"line_end":2319,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":314},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::deflate::stream","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"decl_id":null,"docs":" Extra streaming compression functionality.","sig":null,"attributes":[{"value":"! Extra streaming compression functionality.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":99901,"byte_end":99947,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":99948,"byte_end":99951,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! As of now this is mainly inteded for use to build a higher-level wrapper.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":99952,"byte_end":100029,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100030,"byte_end":100033,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! There is no DeflateState as the needed state is contained in the compressor struct itself.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100034,"byte_end":100128,"line_start":5,"line_end":5,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":328},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100680,"byte_end":100687,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"deflate","qualname":"::deflate::stream::deflate","value":"pub fn deflate(&mut CompressorOxide, &[u8], &mut [u8], MZFlush)\n-> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to compress from input to output with the given Compressor","sig":null,"attributes":[{"value":"/ Try to compress from input to output with the given Compressor","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100301,"byte_end":100367,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100368,"byte_end":100371,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100372,"byte_end":100384,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100385,"byte_end":100388,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Buf` If the size of the `output` slice is empty or no progress was made due to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100389,"byte_end":100489,"line_start":15,"line_end":15,"column_start":1,"column_end":101}},{"value":"/ lack of expected input data or called after the compression was finished without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100490,"byte_end":100574,"line_start":16,"line_end":16,"column_start":1,"column_end":85}},{"value":"/ MZFlush::Finish.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100575,"byte_end":100595,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100596,"byte_end":100599,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Param` if the compressor parameters are set wrong.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/stream.rs","byte_start":100600,"byte_end":100672,"line_start":19,"line_end":19,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":675},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5267,"byte_end":5280,"line_start":18,"line_end":18,"column_start":5,"column_end":18},"name":"NoCompression","qualname":"::deflate::CompressionLevel::NoCompression","value":"CompressionLevel::NoCompression","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Don't do any compression, only output uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Don't do any compression, only output uncompressed blocks.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5200,"byte_end":5262,"line_start":17,"line_end":17,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":678},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5380,"byte_end":5389,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"BestSpeed","qualname":"::deflate::CompressionLevel::BestSpeed","value":"CompressionLevel::BestSpeed","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Fast compression. Uses a special compression routine that is optimized for speed.\n","sig":null,"attributes":[{"value":"/ Fast compression. Uses a special compression routine that is optimized for speed.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5290,"byte_end":5375,"line_start":19,"line_end":19,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":681},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5478,"byte_end":5493,"line_start":22,"line_end":22,"column_start":5,"column_end":20},"name":"BestCompression","qualname":"::deflate::CompressionLevel::BestCompression","value":"CompressionLevel::BestCompression","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Slow/high compression. Do a lot of checks to try to find good matches.\n","sig":null,"attributes":[{"value":"/ Slow/high compression. Do a lot of checks to try to find good matches.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5399,"byte_end":5473,"line_start":21,"line_end":21,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":684},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5547,"byte_end":5562,"line_start":24,"line_end":24,"column_start":5,"column_end":20},"name":"UberCompression","qualname":"::deflate::CompressionLevel::UberCompression","value":"CompressionLevel::UberCompression","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Even more checks, can be very slow.\n","sig":null,"attributes":[{"value":"/ Even more checks, can be very slow.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5503,"byte_end":5542,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":687},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5631,"byte_end":5643,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"DefaultLevel","qualname":"::deflate::CompressionLevel::DefaultLevel","value":"CompressionLevel::DefaultLevel","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Default compromise between speed and compression.\n","sig":null,"attributes":[{"value":"/ Default compromise between speed and compression.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5573,"byte_end":5626,"line_start":25,"line_end":25,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":690},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5696,"byte_end":5714,"line_start":28,"line_end":28,"column_start":5,"column_end":23},"name":"DefaultCompression","qualname":"::deflate::CompressionLevel::DefaultCompression","value":"CompressionLevel::DefaultCompression","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Use the default compression level.\n","sig":null,"attributes":[{"value":"/ Use the default compression level.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5653,"byte_end":5691,"line_start":27,"line_end":27,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":674},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5177,"byte_end":5193,"line_start":16,"line_end":16,"column_start":10,"column_end":26},"name":"CompressionLevel","qualname":"::deflate::CompressionLevel","value":"pub enum CompressionLevel {\n\n    /// Don't do any compression, only output uncompressed blocks.\n    NoCompression = ,\n\n    /// Fast compression. Uses a special compression routine that is optimized for speed.\n    BestSpeed = ,\n\n    /// Slow/high compression. Do a lot of checks to try to find good matches.\n    BestCompression = ,\n\n    /// Even more checks, can be very slow.\n    UberCompression = ,\n\n    /// Default compromise between speed and compression.\n    DefaultLevel = ,\n\n    /// Use the default compression level.\n    DefaultCompression = ,\n}","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690}],"decl_id":null,"docs":" How much processing the compressor should do to compress the data.\n `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\n of checks for matches in the hash chains and whether to use lazy or greedy parsing.\n","sig":null,"attributes":[{"value":"/ How much processing the compressor should do to compress the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":4848,"byte_end":4918,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":4919,"byte_end":5015,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ of checks for matches in the hash chains and whether to use lazy or greedy parsing.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5016,"byte_end":5103,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"repr(i32)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":5104,"byte_end":5116,"line_start":14,"line_end":14,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":330},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":7809,"byte_end":7824,"line_start":110,"line_end":110,"column_start":8,"column_end":23},"name":"compress_to_vec","qualname":"::deflate::compress_to_vec","value":"pub fn compress_to_vec(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10).\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10).","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":7715,"byte_end":7801,"line_start":109,"line_end":109,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":331},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":8035,"byte_end":8055,"line_start":116,"line_end":116,"column_start":8,"column_end":28},"name":"compress_to_vec_zlib","qualname":"::deflate::compress_to_vec_zlib","value":"pub fn compress_to_vec_zlib(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10), and with a\n zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10), and with a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":7912,"byte_end":8009,"line_start":114,"line_end":114,"column_start":1,"column_end":98}},{"value":"/ zlib wrapper.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":8010,"byte_end":8027,"line_start":115,"line_end":115,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inflate","qualname":"::inflate","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":1060},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":457},{"krate":0,"index":472},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":825},{"krate":0,"index":859},{"krate":0,"index":858},{"krate":0,"index":856},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":847},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"decl_id":null,"docs":" This module contains functionality for decompression.\n","sig":null,"attributes":[{"value":"! This module contains functionality for decompression.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":103808,"byte_end":103865,"line_start":1,"line_end":1,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":339},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::inflate::core","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":357},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":707},{"krate":0,"index":789},{"krate":0,"index":787},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":779},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":798},{"krate":0,"index":806},{"krate":0,"index":804},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456}],"decl_id":null,"docs":" Streaming decompression functionality.\n","sig":null,"attributes":[{"value":"! Streaming decompression functionality.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":110079,"byte_end":110121,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":349},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":110304,"byte_end":110322,"line_start":11,"line_end":11,"column_start":11,"column_end":29},"name":"TINFL_LZ_DICT_SIZE","qualname":"::inflate::core::TINFL_LZ_DICT_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":375},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":113935,"byte_end":113948,"line_start":105,"line_end":105,"column_start":9,"column_end":22},"name":"inflate_flags","qualname":"::inflate::core::inflate_flags","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":376},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114011,"byte_end":114039,"line_start":107,"line_end":107,"column_start":15,"column_end":43},"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_PARSE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we try to parse a zlib header?\n","sig":null,"attributes":[{"value":"/ Should we try to parse a zlib header?","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":113955,"byte_end":113996,"line_start":106,"line_end":106,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":377},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114140,"byte_end":114165,"line_start":109,"line_end":109,"column_start":15,"column_end":40},"name":"TINFL_FLAG_HAS_MORE_INPUT","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" There is more input that hasn't been given to the decompressor yet.\n","sig":null,"attributes":[{"value":"/ There is more input that hasn't been given to the decompressor yet.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114054,"byte_end":114125,"line_start":108,"line_end":108,"column_start":5,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":378},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114240,"byte_end":114280,"line_start":111,"line_end":111,"column_start":15,"column_end":55},"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The output buffer should not wrap around.\n","sig":null,"attributes":[{"value":"/ The output buffer should not wrap around.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114180,"byte_end":114225,"line_start":110,"line_end":110,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":379},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114374,"byte_end":114400,"line_start":113,"line_end":113,"column_start":15,"column_end":41},"name":"TINFL_FLAG_COMPUTE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we calculate the adler32 checksum of the output data?\n","sig":null,"attributes":[{"value":"/ Should we calculate the adler32 checksum of the output data?","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114295,"byte_end":114359,"line_start":112,"line_end":112,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114660,"byte_end":114677,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"name":"DecompressorOxide","qualname":"::inflate::core::DecompressorOxide","value":"DecompressorOxide {  }","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403}],"decl_id":null,"docs":" Main decompression struct.","sig":null,"attributes":[{"value":"/ Main decompression struct.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114614,"byte_end":114644,"line_start":126,"line_end":126,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":114645,"byte_end":114648,"line_start":127,"line_end":127,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":115858,"byte_end":115861,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<DecompressorOxide>::new","value":"pub fn new() -> DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[{"value":"/ Create a new tinfl_decompressor with all fields set to 0.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":115785,"byte_end":115846,"line_start":164,"line_end":164,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":115998,"byte_end":116002,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"init","qualname":"<DecompressorOxide>::init","value":"pub fn init(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Set the current state to `Start`.\n","sig":null,"attributes":[{"value":"/ Set the current state to `Start`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":115935,"byte_end":115972,"line_start":169,"line_end":169,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":115977,"byte_end":115986,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":116229,"byte_end":116236,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"adler32","qualname":"<DecompressorOxide>::adler32","value":"pub fn adler32(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 checksum of the currently decompressed data.\n","sig":null,"attributes":[{"value":"/ Returns the adler32 checksum of the currently decompressed data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":116135,"byte_end":116203,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":116208,"byte_end":116217,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":456},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146347,"byte_end":146357,"line_start":1020,"line_end":1020,"column_start":8,"column_end":18},"name":"decompress","qualname":"::inflate::core::decompress","value":"pub fn decompress(&mut DecompressorOxide, &[u8], &mut [u8], usize, u32)\n-> (TINFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out_cur` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.","sig":null,"attributes":[{"value":"/ Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144275,"byte_end":144368,"line_start":985,"line_end":985,"column_start":1,"column_end":94}},{"value":"/ empty, `out_cur` is full, the end of the deflate stream is hit, or there is an error in the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144369,"byte_end":144464,"line_start":986,"line_end":986,"column_start":1,"column_end":96}},{"value":"/ deflate stream.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144465,"byte_end":144484,"line_start":987,"line_end":987,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144485,"byte_end":144488,"line_start":988,"line_end":988,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144489,"byte_end":144504,"line_start":989,"line_end":989,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144505,"byte_end":144508,"line_start":990,"line_end":990,"column_start":1,"column_end":4}},{"value":"/ `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144509,"byte_end":144609,"line_start":991,"line_end":991,"column_start":1,"column_end":101}},{"value":"/ start at the first byte of this buffer.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144610,"byte_end":144653,"line_start":992,"line_end":992,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144654,"byte_end":144657,"line_start":993,"line_end":993,"column_start":1,"column_end":4}},{"value":"/ `out_cur` is a mutable cursor into the buffer that will store the decompressed data, and that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144658,"byte_end":144755,"line_start":994,"line_end":994,"column_start":1,"column_end":98}},{"value":"/ stores previously decompressed data if any.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144756,"byte_end":144803,"line_start":995,"line_end":995,"column_start":1,"column_end":48}},{"value":"/ * The position of the output cursor indicates where in the output buffer slice writing should","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144804,"byte_end":144901,"line_start":996,"line_end":996,"column_start":1,"column_end":98}},{"value":"/ start.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144902,"byte_end":144912,"line_start":997,"line_end":997,"column_start":1,"column_end":11}},{"value":"/ * If TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF is not set, the output buffer is used in a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":144913,"byte_end":145005,"line_start":998,"line_end":998,"column_start":1,"column_end":93}},{"value":"/ wrapping manner, and it's size is required to be a power of 2.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145006,"byte_end":145072,"line_start":999,"line_end":999,"column_start":1,"column_end":67}},{"value":"/ * The decompression function normally needs access to 32KiB of the previously decompressed data","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145073,"byte_end":145172,"line_start":1000,"line_end":1000,"column_start":1,"column_end":100}},{"value":"/(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145173,"byte_end":145264,"line_start":1001,"line_end":1001,"column_start":1,"column_end":92}},{"value":"/     - If this data is not available, decompression may fail.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145265,"byte_end":145329,"line_start":1002,"line_end":1002,"column_start":1,"column_end":65}},{"value":"/     - Some deflate compressors allow specifying a window size which limits match distances to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145330,"byte_end":145427,"line_start":1003,"line_end":1003,"column_start":1,"column_end":98}},{"value":"/ less than this, or alternatively an RLE mode where matches will only refer to the previous byte","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145428,"byte_end":145527,"line_start":1004,"line_end":1004,"column_start":1,"column_end":100}},{"value":"/ and thus allows a smaller output buffer. The window size can be specified in the zlib","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145528,"byte_end":145617,"line_start":1005,"line_end":1005,"column_start":1,"column_end":90}},{"value":"/ header structure, however, the header data should not be relied on to be correct.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145618,"byte_end":145703,"line_start":1006,"line_end":1006,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145704,"byte_end":145707,"line_start":1007,"line_end":1007,"column_start":1,"column_end":4}},{"value":"/ `flags`","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145708,"byte_end":145719,"line_start":1008,"line_end":1008,"column_start":1,"column_end":12}},{"value":"/ Flags to indicate settings and status to the decompression function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145720,"byte_end":145792,"line_start":1009,"line_end":1009,"column_start":1,"column_end":73}},{"value":"/ * The `TINFL_FLAG_HAS_MORE_INPUT` has to be specified if more compressed data is to be provided","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145793,"byte_end":145892,"line_start":1010,"line_end":1010,"column_start":1,"column_end":100}},{"value":"/ in a subsequent call to this function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145893,"byte_end":145935,"line_start":1011,"line_end":1011,"column_start":1,"column_end":43}},{"value":"/ * See the the [`inflate_flags`](inflate_flags/index.html) module for details on other flags.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":145936,"byte_end":146032,"line_start":1012,"line_end":1012,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146033,"byte_end":146036,"line_start":1013,"line_end":1013,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146037,"byte_end":146050,"line_start":1014,"line_end":1014,"column_start":1,"column_end":14}},{"value":"/ returns a tuple containing the status of the compressor, the number of input bytes read, and the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146051,"byte_end":146151,"line_start":1015,"line_end":1015,"column_start":1,"column_end":101}},{"value":"/ number of bytes output to `out_cur`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146152,"byte_end":146192,"line_start":1016,"line_end":1016,"column_start":1,"column_end":41}},{"value":"/ Updates the position of `out_cur` to point to the next free spot in the output buffer.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146193,"byte_end":146283,"line_start":1017,"line_end":1017,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146284,"byte_end":146287,"line_start":1018,"line_end":1018,"column_start":1,"column_end":4}},{"value":"/ This function shouldn't panic pending any bugs.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":146288,"byte_end":146339,"line_start":1019,"line_end":1019,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":472},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::inflate::stream","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530}],"decl_id":null,"docs":" Extra streaming decompression functionality.","sig":null,"attributes":[{"value":"! Extra streaming decompression functionality.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":183846,"byte_end":183894,"line_start":1,"line_end":1,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":183895,"byte_end":183898,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! As of now this is mainly inteded for use to build a higher-level wrapper.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":183899,"byte_end":183976,"line_start":3,"line_end":3,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":490},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184326,"byte_end":184337,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ResetPolicy","qualname":"::inflate::stream::ResetPolicy","value":"ResetPolicy","parent":null,"children":[{"krate":0,"index":491}],"decl_id":null,"docs":" Tag that determines reset policy of [InflateState](struct.InflateState.html)\n","sig":null,"attributes":[{"value":"/ Tag that determines reset policy of [InflateState](struct.InflateState.html)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184235,"byte_end":184315,"line_start":11,"line_end":11,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184370,"byte_end":184375,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"reset","qualname":"::inflate::stream::ResetPolicy::reset","value":"pub fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Performs reset\n","sig":null,"attributes":[{"value":"/ Performs reset","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184344,"byte_end":184362,"line_start":13,"line_end":13,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184597,"byte_end":184605,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"MinReset","qualname":"::inflate::stream::MinReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state, without performing expensive ops (e.g. zeroing buffer)","sig":null,"attributes":[{"value":"/ Resets state, without performing expensive ops (e.g. zeroing buffer)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184413,"byte_end":184485,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184486,"byte_end":184489,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Note that not zeroing buffer can lead to security issues when dealing with untrusted input.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184490,"byte_end":184585,"line_start":19,"line_end":19,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":496},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185002,"byte_end":185011,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"ZeroReset","qualname":"::inflate::stream::ZeroReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state and zero memory, continuing to use the same data format.\n","sig":null,"attributes":[{"value":"/ Resets state and zero memory, continuing to use the same data format.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184917,"byte_end":184990,"line_start":33,"line_end":33,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":501},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185306,"byte_end":185315,"line_start":47,"line_end":47,"column_start":12,"column_end":21},"name":"FullReset","qualname":"::inflate::stream::FullReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Full reset of the state, including zeroing memory.","sig":null,"attributes":[{"value":"/ Full reset of the state, including zeroing memory.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185195,"byte_end":185249,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185250,"byte_end":185253,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Requires to provide new data format.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185254,"byte_end":185294,"line_start":46,"line_end":46,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":503},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185316,"byte_end":185330,"line_start":47,"line_end":47,"column_start":22,"column_end":36},"name":"0","qualname":"::inflate::stream::FullReset::0","value":"DataFormat","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185609,"byte_end":185621,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"InflateState","qualname":"::inflate::stream::InflateState","value":"InflateState {  }","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515}],"decl_id":null,"docs":" A struct that compbines a decompressor with extra data for streaming decompression.","sig":null,"attributes":[{"value":"/ A struct that compbines a decompressor with extra data for streaming decompression.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185506,"byte_end":185593,"line_start":57,"line_end":57,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185594,"byte_end":185597,"line_start":58,"line_end":58,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187130,"byte_end":187133,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateState>::new","value":"pub fn new(DataFormat) -> InflateState","parent":null,"children":[],"decl_id":null,"docs":" Create a new state.","sig":null,"attributes":[{"value":"/ Create a new state.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186812,"byte_end":186835,"line_start":98,"line_end":98,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186840,"byte_end":186843,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Note that this struct is quite large due to internal buffers, and as such storing it on","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186848,"byte_end":186939,"line_start":100,"line_end":100,"column_start":5,"column_end":96}},{"value":"/ the stack is not recommended.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186944,"byte_end":186977,"line_start":101,"line_end":101,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186982,"byte_end":186985,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186990,"byte_end":187006,"line_start":103,"line_end":103,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187011,"byte_end":187100,"line_start":104,"line_end":104,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187105,"byte_end":187118,"line_start":105,"line_end":105,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187468,"byte_end":187477,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"new_boxed","qualname":"<InflateState>::new_boxed","value":"pub fn new_boxed(DataFormat) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state on the heap.","sig":null,"attributes":[{"value":"/ Create a new state on the heap.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187280,"byte_end":187315,"line_start":112,"line_end":112,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187320,"byte_end":187323,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187328,"byte_end":187344,"line_start":114,"line_end":114,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187349,"byte_end":187438,"line_start":115,"line_end":115,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187443,"byte_end":187456,"line_start":116,"line_end":116,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187686,"byte_end":187698,"line_start":124,"line_end":124,"column_start":12,"column_end":24},"name":"decompressor","qualname":"<InflateState>::decompressor","value":"pub fn decompressor(&mut Self) -> &mut DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Access the innner decompressor.\n","sig":null,"attributes":[{"value":"/ Access the innner decompressor.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187639,"byte_end":187674,"line_start":123,"line_end":123,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187863,"byte_end":187874,"line_start":129,"line_end":129,"column_start":12,"column_end":23},"name":"last_status","qualname":"<InflateState>::last_status","value":"pub fn last_status(&Self) -> TINFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Return the status of the last call to `inflate` with this `InflateState`.\n","sig":null,"attributes":[{"value":"/ Return the status of the last call to `inflate` with this `InflateState`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187774,"byte_end":187851,"line_start":128,"line_end":128,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188200,"byte_end":188226,"line_start":138,"line_end":138,"column_start":12,"column_end":38},"name":"new_boxed_with_window_bits","qualname":"<InflateState>::new_boxed_with_window_bits","value":"pub fn new_boxed_with_window_bits(i32) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state using miniz/zlib style window bits parameter.","sig":null,"attributes":[{"value":"/ Create a new state using miniz/zlib style window bits parameter.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":187935,"byte_end":188003,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188008,"byte_end":188011,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ The decompressor does not support different window sizes. As such,","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188016,"byte_end":188086,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/ any positive (>0) value will set the zlib header flag, while a negative one","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188091,"byte_end":188170,"line_start":136,"line_end":136,"column_start":5,"column_end":84}},{"value":"/ will not.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188175,"byte_end":188188,"line_start":137,"line_end":137,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188530,"byte_end":188535,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateState>::reset","value":"pub fn reset(&mut Self, DataFormat)","parent":null,"children":[],"decl_id":null,"docs":" Reset the decompressor without re-allocating memory, using the given\n data format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188411,"byte_end":188420,"line_start":144,"line_end":144,"column_start":5,"column_end":14}},{"value":"/ Reset the decompressor without re-allocating memory, using the given","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188425,"byte_end":188497,"line_start":145,"line_end":145,"column_start":5,"column_end":77}},{"value":"/ data format.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188502,"byte_end":188518,"line_start":146,"line_end":146,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188709,"byte_end":188717,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"name":"reset_as","qualname":"<InflateState>::reset_as","value":"pub fn reset_as<T: ResetPolicy>(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Resets the state according to specified policy.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188632,"byte_end":188641,"line_start":151,"line_end":151,"column_start":5,"column_end":14}},{"value":"/ Resets the state according to specified policy.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188646,"byte_end":188697,"line_start":152,"line_end":152,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":189185,"byte_end":189192,"line_start":167,"line_end":167,"column_start":8,"column_end":15},"name":"inflate","qualname":"::inflate::stream::inflate","value":"pub fn inflate(&mut InflateState, &[u8], &mut [u8], MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to decompress from `input` to `output` with the given `InflateState`","sig":null,"attributes":[{"value":"/ Try to decompress from `input` to `output` with the given `InflateState`","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188794,"byte_end":188870,"line_start":158,"line_end":158,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188871,"byte_end":188874,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188875,"byte_end":188887,"line_start":160,"line_end":160,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188888,"byte_end":188891,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Buf` If the size of the `output` slice is empty or no progress was made due to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188892,"byte_end":188992,"line_start":162,"line_end":162,"column_start":1,"column_end":101}},{"value":"/ lack of expected input data or called after the decompression was","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":188993,"byte_end":189062,"line_start":163,"line_end":163,"column_start":1,"column_end":70}},{"value":"/ finished without MZFlush::Finish.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":189063,"byte_end":189100,"line_start":164,"line_end":164,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":189101,"byte_end":189104,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Param` if the compressor parameters are set wrong.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":189105,"byte_end":189177,"line_start":166,"line_end":166,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":826},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104620,"byte_end":104644,"line_start":28,"line_end":28,"column_start":5,"column_end":29},"name":"FailedCannotMakeProgress","qualname":"::inflate::TINFLStatus::FailedCannotMakeProgress","value":"TINFLStatus::FailedCannotMakeProgress","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" More input data was expected, but the caller indicated that there was more data, so the\n input stream is likely truncated.\n","sig":null,"attributes":[{"value":"/ More input data was expected, but the caller indicated that there was more data, so the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104482,"byte_end":104573,"line_start":26,"line_end":26,"column_start":5,"column_end":96}},{"value":"/ input stream is likely truncated.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104578,"byte_end":104615,"line_start":27,"line_end":27,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":829},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104757,"byte_end":104765,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::inflate::TINFLStatus::BadParam","value":"TINFLStatus::BadParam","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" One or more of the input parameters were invalid.\n","sig":null,"attributes":[{"value":"/ One or more of the input parameters were invalid.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104699,"byte_end":104752,"line_start":29,"line_end":29,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":832},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104918,"byte_end":104933,"line_start":33,"line_end":33,"column_start":5,"column_end":20},"name":"Adler32Mismatch","qualname":"::inflate::TINFLStatus::Adler32Mismatch","value":"TINFLStatus::Adler32Mismatch","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" The decompression went fine, but the adler32 checksum did not match the one\n provided in the header.\n","sig":null,"attributes":[{"value":"/ The decompression went fine, but the adler32 checksum did not match the one","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104802,"byte_end":104881,"line_start":31,"line_end":31,"column_start":5,"column_end":84}},{"value":"/ provided in the header.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104886,"byte_end":104913,"line_start":32,"line_end":32,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":835},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105027,"byte_end":105033,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Failed","qualname":"::inflate::TINFLStatus::Failed","value":"TINFLStatus::Failed","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" Failed to decompress due to invalid data.\n","sig":null,"attributes":[{"value":"/ Failed to decompress due to invalid data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104977,"byte_end":105022,"line_start":34,"line_end":34,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":838},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105113,"byte_end":105117,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Done","qualname":"::inflate::TINFLStatus::Done","value":"TINFLStatus::Done","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" Finished decomression without issues.\n","sig":null,"attributes":[{"value":"/ Finished decomression without issues.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105067,"byte_end":105108,"line_start":36,"line_end":36,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":841},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105223,"byte_end":105237,"line_start":39,"line_end":39,"column_start":5,"column_end":19},"name":"NeedsMoreInput","qualname":"::inflate::TINFLStatus::NeedsMoreInput","value":"TINFLStatus::NeedsMoreInput","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" The decompressor needs more input data to continue decompressing.\n","sig":null,"attributes":[{"value":"/ The decompressor needs more input data to continue decompressing.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105149,"byte_end":105218,"line_start":38,"line_end":38,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":844},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105355,"byte_end":105368,"line_start":41,"line_end":41,"column_start":5,"column_end":18},"name":"HasMoreOutput","qualname":"::inflate::TINFLStatus::HasMoreOutput","value":"TINFLStatus::HasMoreOutput","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" There is still pending data that didn't fit in the output buffer.\n","sig":null,"attributes":[{"value":"/ There is still pending data that didn't fit in the output buffer.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105281,"byte_end":105350,"line_start":40,"line_end":40,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":825},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104464,"byte_end":104475,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"TINFLStatus","qualname":"::inflate::TINFLStatus","value":"pub enum TINFLStatus {\n\n    /// More input data was expected, but the caller indicated that there was more data, so the\n    /// input stream is likely truncated.\n    FailedCannotMakeProgress = ,\n\n    /// One or more of the input parameters were invalid.\n    BadParam = ,\n\n    /// The decompression went fine, but the adler32 checksum did not match the one\n    /// provided in the header.\n    Adler32Mismatch = ,\n\n    /// Failed to decompress due to invalid data.\n    Failed = ,\n\n    /// Finished decomression without issues.\n    Done = ,\n\n    /// The decompressor needs more input data to continue decompressing.\n    NeedsMoreInput = ,\n\n    /// There is still pending data that didn't fit in the output buffer.\n    HasMoreOutput = ,\n}","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":841},{"krate":0,"index":844}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"/ Return status codes.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104367,"byte_end":104391,"line_start":22,"line_end":22,"column_start":1,"column_end":25}},{"value":"repr(i8)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104392,"byte_end":104403,"line_start":23,"line_end":23,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105440,"byte_end":105448,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"from_i32","qualname":"<TINFLStatus>::from_i32","value":"pub fn from_i32(i32) -> Option<TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106196,"byte_end":106213,"line_start":64,"line_end":64,"column_start":8,"column_end":25},"name":"decompress_to_vec","qualname":"::inflate::decompress_to_vec","value":"pub fn decompress_to_vec(&[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data in `input` to a vector.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106020,"byte_end":106083,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106084,"byte_end":106087,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Returns a status and an integer representing where the decompressor failed on failure.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106088,"byte_end":106178,"line_start":62,"line_end":62,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106179,"byte_end":106188,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106521,"byte_end":106543,"line_start":72,"line_end":72,"column_start":8,"column_end":30},"name":"decompress_to_vec_zlib","qualname":"::inflate::decompress_to_vec_zlib","value":"pub fn decompress_to_vec_zlib(&[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106323,"byte_end":106408,"line_start":68,"line_end":68,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106409,"byte_end":106412,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Returns a status and an integer representing where the decompressor failed on failure.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106413,"byte_end":106503,"line_start":70,"line_end":70,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106504,"byte_end":106513,"line_start":71,"line_end":71,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107046,"byte_end":107074,"line_start":86,"line_end":86,"column_start":8,"column_end":36},"name":"decompress_to_vec_with_limit","qualname":"::inflate::decompress_to_vec_with_limit","value":"pub fn decompress_to_vec_with_limit(&[u8], usize)\n-> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.\n The vector is grown to at most `max_size` bytes; if the data does not fit in that size,\n `TINFLStatus::HasMoreOutput` error is returned.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data in `input` to a vector.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106726,"byte_end":106789,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/ The vector is grown to at most `max_size` bytes; if the data does not fit in that size,","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106790,"byte_end":106881,"line_start":81,"line_end":81,"column_start":1,"column_end":92}},{"value":"/ `TINFLStatus::HasMoreOutput` error is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106882,"byte_end":106933,"line_start":82,"line_end":82,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106934,"byte_end":106937,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Returns a status and an integer representing where the decompressor failed on failure.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":106938,"byte_end":107028,"line_start":84,"line_end":84,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107029,"byte_end":107038,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107533,"byte_end":107566,"line_start":96,"line_end":96,"column_start":8,"column_end":41},"name":"decompress_to_vec_zlib_with_limit","qualname":"::inflate::decompress_to_vec_zlib_with_limit","value":"pub fn decompress_to_vec_zlib_with_limit(&[u8], usize)\n-> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n The vector is grown to at most `max_size` bytes; if the data does not fit in that size,\n `TINFLStatus::HasMoreOutput` error is returned.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107191,"byte_end":107276,"line_start":90,"line_end":90,"column_start":1,"column_end":86}},{"value":"/ The vector is grown to at most `max_size` bytes; if the data does not fit in that size,","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107277,"byte_end":107368,"line_start":91,"line_end":91,"column_start":1,"column_end":92}},{"value":"/ `TINFLStatus::HasMoreOutput` error is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107369,"byte_end":107420,"line_start":92,"line_end":92,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107421,"byte_end":107424,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ Returns a status and an integer representing where the decompressor failed on failure.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107425,"byte_end":107515,"line_start":94,"line_end":94,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":107516,"byte_end":107525,"line_start":95,"line_end":95,"column_start":1,"column_end":10}}]},{"kind":"Const","id":{"krate":0,"index":549},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/shared.rs","byte_start":196162,"byte_end":196177,"line_start":4,"line_end":4,"column_start":11,"column_end":26},"name":"MZ_ADLER32_INIT","qualname":"::shared::MZ_ADLER32_INIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":550},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/shared.rs","byte_start":196214,"byte_end":196236,"line_start":7,"line_end":7,"column_start":11,"column_end":33},"name":"MZ_DEFAULT_WINDOW_BITS","qualname":"::shared::MZ_DEFAULT_WINDOW_BITS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/shared.rs","byte_start":196390,"byte_end":196404,"line_start":14,"line_end":14,"column_start":8,"column_end":22},"name":"update_adler32","qualname":"::shared::update_adler32","value":"pub fn update_adler32(u32, &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":862},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1619,"byte_end":1623,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"None","qualname":"::MZFlush::None","value":"MZFlush::None","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" Don't force any flushing.\n Used when more input data is expected.\n","sig":null,"attributes":[{"value":"/ Don't force any flushing.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1538,"byte_end":1567,"line_start":50,"line_end":50,"column_start":5,"column_end":34}},{"value":"/ Used when more input data is expected.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1572,"byte_end":1614,"line_start":51,"line_end":51,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":865},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1698,"byte_end":1705,"line_start":55,"line_end":55,"column_start":5,"column_end":12},"name":"Partial","qualname":"::MZFlush::Partial","value":"MZFlush::Partial","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" Zlib partial flush.\n Currently treated as `Sync`.\n","sig":null,"attributes":[{"value":"/ Zlib partial flush.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1633,"byte_end":1656,"line_start":53,"line_end":53,"column_start":5,"column_end":28}},{"value":"/ Currently treated as `Sync`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1661,"byte_end":1693,"line_start":54,"line_end":54,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":868},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1839,"byte_end":1843,"line_start":58,"line_end":58,"column_start":5,"column_end":9},"name":"Sync","qualname":"::MZFlush::Sync","value":"MZFlush::Sync","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" Finish compressing the currently buffered data, and output an empty raw block.\n Has no use in decompression.\n","sig":null,"attributes":[{"value":"/ Finish compressing the currently buffered data, and output an empty raw block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1715,"byte_end":1797,"line_start":56,"line_end":56,"column_start":5,"column_end":87}},{"value":"/ Has no use in decompression.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1802,"byte_end":1834,"line_start":57,"line_end":57,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":871},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2045,"byte_end":2049,"line_start":62,"line_end":62,"column_start":5,"column_end":9},"name":"Full","qualname":"::MZFlush::Full","value":"MZFlush::Full","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" Same as `Sync`, but resets the compression dictionary so that further compressed\n data does not depend on data compressed before the flush.\n Has no use in decompression.\n","sig":null,"attributes":[{"value":"/ Same as `Sync`, but resets the compression dictionary so that further compressed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1853,"byte_end":1937,"line_start":59,"line_end":59,"column_start":5,"column_end":89}},{"value":"/ data does not depend on data compressed before the flush.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1942,"byte_end":2003,"line_start":60,"line_end":60,"column_start":5,"column_end":66}},{"value":"/ Has no use in decompression.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2008,"byte_end":2040,"line_start":61,"line_end":61,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":874},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2123,"byte_end":2129,"line_start":64,"line_end":64,"column_start":5,"column_end":11},"name":"Finish","qualname":"::MZFlush::Finish","value":"MZFlush::Finish","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" Attempt to flush the remaining data and end the stream.\n","sig":null,"attributes":[{"value":"/ Attempt to flush the remaining data and end the stream.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2059,"byte_end":2118,"line_start":63,"line_end":63,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":877},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2164,"byte_end":2169,"line_start":66,"line_end":66,"column_start":5,"column_end":10},"name":"Block","qualname":"::MZFlush::Block","value":"MZFlush::Block","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" Not implemented.\n","sig":null,"attributes":[{"value":"/ Not implemented.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2139,"byte_end":2159,"line_start":65,"line_end":65,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":861},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1524,"byte_end":1531,"line_start":49,"line_end":49,"column_start":10,"column_end":17},"name":"MZFlush","qualname":"::MZFlush","value":"pub enum MZFlush {\n\n    /// Don't force any flushing.\n    /// Used when more input data is expected.\n    None = ,\n\n    /// Zlib partial flush.\n    /// Currently treated as `Sync`.\n    Partial = ,\n\n    /// Finish compressing the currently buffered data, and output an empty raw block.\n    /// Has no use in decompression.\n    Sync = ,\n\n    /// Same as `Sync`, but resets the compression dictionary so that further compressed\n    /// data does not depend on data compressed before the flush.\n    /// Has no use in decompression.\n    Full = ,\n\n    /// Attempt to flush the remaining data and end the stream.\n    Finish = ,\n\n    /// Not implemented.\n    Block = ,\n}","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877}],"decl_id":null,"docs":" A list of flush types.","sig":null,"attributes":[{"value":"/ A list of flush types.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1338,"byte_end":1364,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1365,"byte_end":1368,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ See [http://www.bolet.org/~pornin/deflate-flush.html] for more in-depth info.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1369,"byte_end":1450,"line_start":46,"line_end":46,"column_start":1,"column_end":82}},{"value":"repr(i32)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1451,"byte_end":1463,"line_start":47,"line_end":47,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2319,"byte_end":2322,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<MZFlush>::new","value":"pub fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":" Create an MZFlush value from an integer value.","sig":null,"attributes":[{"value":"/ Create an MZFlush value from an integer value.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2197,"byte_end":2247,"line_start":70,"line_end":70,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2252,"byte_end":2255,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Returns `MZError::Param` on invalid values.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2260,"byte_end":2307,"line_start":72,"line_end":72,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":895},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2724,"byte_end":2726,"line_start":88,"line_end":88,"column_start":5,"column_end":7},"name":"Ok","qualname":"::MZStatus::Ok","value":"MZStatus::Ok","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":898},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2736,"byte_end":2745,"line_start":89,"line_end":89,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::MZStatus::StreamEnd","value":"MZStatus::StreamEnd","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":901},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2755,"byte_end":2763,"line_start":90,"line_end":90,"column_start":5,"column_end":13},"name":"NeedDict","qualname":"::MZStatus::NeedDict","value":"MZStatus::NeedDict","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":894},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2709,"byte_end":2717,"line_start":87,"line_end":87,"column_start":10,"column_end":18},"name":"MZStatus","qualname":"::MZStatus","value":"pub enum MZStatus { Ok = , StreamEnd = , NeedDict = , }","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":901}],"decl_id":null,"docs":" A list of miniz successful status codes.\n","sig":null,"attributes":[{"value":"/ A list of miniz successful status codes.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2591,"byte_end":2635,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"repr(i32)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2636,"byte_end":2648,"line_start":85,"line_end":85,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2900,"byte_end":2905,"line_start":97,"line_end":97,"column_start":5,"column_end":10},"name":"ErrNo","qualname":"::MZError::ErrNo","value":"MZError::ErrNo","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":922},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2916,"byte_end":2922,"line_start":98,"line_end":98,"column_start":5,"column_end":11},"name":"Stream","qualname":"::MZError::Stream","value":"MZError::Stream","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":925},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2933,"byte_end":2937,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Data","qualname":"::MZError::Data","value":"MZError::Data","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2948,"byte_end":2951,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Mem","qualname":"::MZError::Mem","value":"MZError::Mem","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":931},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2962,"byte_end":2965,"line_start":101,"line_end":101,"column_start":5,"column_end":8},"name":"Buf","qualname":"::MZError::Buf","value":"MZError::Buf","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":934},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2976,"byte_end":2983,"line_start":102,"line_end":102,"column_start":5,"column_end":12},"name":"Version","qualname":"::MZError::Version","value":"MZError::Version","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":937},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2994,"byte_end":2999,"line_start":103,"line_end":103,"column_start":5,"column_end":10},"name":"Param","qualname":"::MZError::Param","value":"MZError::Param","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":918},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2886,"byte_end":2893,"line_start":96,"line_end":96,"column_start":10,"column_end":17},"name":"MZError","qualname":"::MZError","value":"pub enum MZError {\n    ErrNo = ,\n    Stream = ,\n    Data = ,\n    Mem = ,\n    Buf = ,\n    Version = ,\n    Param = ,\n}","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":934},{"krate":0,"index":937}],"decl_id":null,"docs":" A list of miniz failed status codes.\n","sig":null,"attributes":[{"value":"/ A list of miniz failed status codes.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2772,"byte_end":2812,"line_start":93,"line_end":93,"column_start":1,"column_end":41}},{"value":"repr(i32)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2813,"byte_end":2825,"line_start":94,"line_end":94,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":955},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3203,"byte_end":3207,"line_start":110,"line_end":110,"column_start":5,"column_end":9},"name":"Zlib","qualname":"::DataFormat::Zlib","value":"DataFormat::Zlib","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.\n","sig":null,"attributes":[{"value":"/ Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3127,"byte_end":3198,"line_start":109,"line_end":109,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":957},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3234,"byte_end":3237,"line_start":112,"line_end":112,"column_start":5,"column_end":8},"name":"Raw","qualname":"::DataFormat::Raw","value":"DataFormat::Raw","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Raw DEFLATE.\n","sig":null,"attributes":[{"value":"/ Raw DEFLATE.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3213,"byte_end":3229,"line_start":111,"line_end":111,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":954},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3110,"byte_end":3120,"line_start":108,"line_end":108,"column_start":10,"column_end":20},"name":"DataFormat","qualname":"::DataFormat","value":"pub enum DataFormat {\n\n    /// Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.\n    Zlib,\n\n    /// Raw DEFLATE.\n    Raw,\n}","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":957}],"decl_id":null,"docs":" How compressed data is wrapped.\n","sig":null,"attributes":[{"value":"/ How compressed data is wrapped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3014,"byte_end":3049,"line_start":106,"line_end":106,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":563},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3748,"byte_end":3756,"line_start":133,"line_end":133,"column_start":10,"column_end":18},"name":"MZResult","qualname":"::MZResult","value":"Result<MZStatus, MZError>","parent":null,"children":[],"decl_id":null,"docs":" `Result` alias for all miniz status codes both successful and failed.\n","sig":null,"attributes":[{"value":"/ `Result` alias for all miniz status codes both successful and failed.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3665,"byte_end":3738,"line_start":132,"line_end":132,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":973},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3942,"byte_end":3954,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::StreamResult","value":"StreamResult { bytes_consumed, bytes_written, status }","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976}],"decl_id":null,"docs":" A structure containg the result of a call to the inflate or deflate streaming functions.\n","sig":null,"attributes":[{"value":"/ A structure containg the result of a call to the inflate or deflate streaming functions.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3787,"byte_end":3879,"line_start":135,"line_end":135,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":974},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4024,"byte_end":4038,"line_start":139,"line_end":139,"column_start":9,"column_end":23},"name":"bytes_consumed","qualname":"::StreamResult::bytes_consumed","value":"usize","parent":{"krate":0,"index":973},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input slice.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3961,"byte_end":4015,"line_start":138,"line_end":138,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":975},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4112,"byte_end":4125,"line_start":141,"line_end":141,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":973},"children":[],"decl_id":null,"docs":" The number of bytes written to the output slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes written to the output slice.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4051,"byte_end":4103,"line_start":140,"line_end":140,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":976},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4181,"byte_end":4187,"line_start":143,"line_end":143,"column_start":9,"column_end":15},"name":"status","qualname":"::StreamResult::status","value":"core::result::Result<MZStatus, MZError>","parent":{"krate":0,"index":973},"children":[],"decl_id":null,"docs":" The return status of the call.\n","sig":null,"attributes":[{"value":"/ The return status of the call.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4138,"byte_end":4172,"line_start":142,"line_end":142,"column_start":5,"column_end":39}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/buffer.rs","byte_start":12827,"byte_end":12838,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/buffer.rs","byte_start":12951,"byte_end":12962,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/buffer.rs","byte_start":13229,"byte_end":13237,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24578,"byte_end":24588,"line_start":224,"line_end":224,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24930,"byte_end":24940,"line_start":236,"line_end":236,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":29916,"byte_end":29931,"line_start":401,"line_end":401,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":33395,"byte_end":33410,"line_start":497,"line_end":497,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":34047,"byte_end":34059,"line_start":518,"line_end":518,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":34732,"byte_end":34743,"line_start":542,"line_end":542,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":35622,"byte_end":35633,"line_start":574,"line_end":574,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":36586,"byte_end":36599,"line_start":610,"line_end":610,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":38157,"byte_end":38174,"line_start":665,"line_end":665,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":39379,"byte_end":39388,"line_start":714,"line_end":714,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":41208,"byte_end":41211,"line_start":766,"line_end":766,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":43224,"byte_end":43236,"line_start":826,"line_end":826,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":43501,"byte_end":43513,"line_start":836,"line_end":836,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":55751,"byte_end":55760,"line_start":1194,"line_end":1194,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":62967,"byte_end":62978,"line_start":1389,"line_end":1389,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":64691,"byte_end":64698,"line_start":1448,"line_end":1448,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":110900,"byte_end":110912,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":115761,"byte_end":115778,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":116459,"byte_end":116476,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":118188,"byte_end":118193,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/output_buffer.rs","byte_start":182659,"byte_end":182671,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184629,"byte_end":184637,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185035,"byte_end":185044,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185355,"byte_end":185364,"line_start":49,"line_end":49,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186402,"byte_end":186414,"line_start":83,"line_end":83,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186793,"byte_end":186805,"line_start":97,"line_end":97,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105415,"byte_end":105426,"line_start":44,"line_end":44,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2183,"byte_end":2190,"line_start":69,"line_end":69,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3247,"byte_end":3257,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4207,"byte_end":4219,"line_start":146,"line_end":146,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4472,"byte_end":4480,"line_start":157,"line_end":157,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4596,"byte_end":4604,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1173,"byte_end":1180,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":4806,"byte_end":4810,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":39}},{"kind":"Mod","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/mod.rs","byte_start":4820,"byte_end":4826,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":314}},{"kind":"Mod","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":1190,"byte_end":1197,"line_start":38,"line_end":38,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":333}},{"kind":"Mod","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":103998,"byte_end":104002,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":339}},{"kind":"Mod","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":104031,"byte_end":104037,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":472}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/buffer.rs","byte_start":12827,"byte_end":12838,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/buffer.rs","byte_start":12951,"byte_end":12962,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":19},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/buffer.rs","byte_start":13229,"byte_end":13237,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24578,"byte_end":24588,"line_start":224,"line_end":224,"column_start":24,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":24930,"byte_end":24940,"line_start":236,"line_end":236,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":29916,"byte_end":29931,"line_start":401,"line_end":401,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":33395,"byte_end":33410,"line_start":497,"line_end":497,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":111},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":34047,"byte_end":34059,"line_start":518,"line_end":518,"column_start":10,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":34732,"byte_end":34743,"line_start":542,"line_end":542,"column_start":10,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":35622,"byte_end":35633,"line_start":574,"line_end":574,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":36586,"byte_end":36599,"line_start":610,"line_end":610,"column_start":10,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":38157,"byte_end":38174,"line_start":665,"line_end":665,"column_start":10,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":39379,"byte_end":39388,"line_start":714,"line_end":714,"column_start":6,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":41208,"byte_end":41211,"line_start":766,"line_end":766,"column_start":6,"column_end":9},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":43224,"byte_end":43236,"line_start":826,"line_end":826,"column_start":18,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":43501,"byte_end":43513,"line_start":836,"line_end":836,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":55751,"byte_end":55760,"line_start":1194,"line_end":1194,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":62967,"byte_end":62978,"line_start":1389,"line_end":1389,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":260},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/deflate/core.rs","byte_start":64691,"byte_end":64698,"line_start":1448,"line_end":1448,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":110900,"byte_end":110912,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":115761,"byte_end":115778,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":116459,"byte_end":116476,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":384},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/core.rs","byte_start":118188,"byte_end":118193,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/output_buffer.rs","byte_start":182659,"byte_end":182671,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":184629,"byte_end":184637,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185035,"byte_end":185044,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":496},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":185355,"byte_end":185364,"line_start":49,"line_end":49,"column_start":22,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":501},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186402,"byte_end":186414,"line_start":83,"line_end":83,"column_start":18,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":506},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/stream.rs","byte_start":186793,"byte_end":186805,"line_start":97,"line_end":97,"column_start":6,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/inflate/mod.rs","byte_start":105415,"byte_end":105426,"line_start":44,"line_end":44,"column_start":6,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":2183,"byte_end":2190,"line_start":69,"line_end":69,"column_start":6,"column_end":13},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":861},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":3247,"byte_end":3257,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":954},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4207,"byte_end":4219,"line_start":146,"line_end":146,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":973},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4472,"byte_end":4480,"line_start":157,"line_end":157,"column_start":44,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.3/src/lib.rs","byte_start":4596,"byte_end":4604,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":1845}}]}