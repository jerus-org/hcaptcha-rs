{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1","program":"/home/gorta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=6ad98de7866ad33e","-C","extra-filename=-6ad98de7866ad33e","--out-dir","/home/gorta/garden/hcaptcha-rs/target/rls/debug/deps","-L","dependency=/home/gorta/garden/hcaptcha-rs/target/rls/debug/deps","--extern","scopeguard=/home/gorta/garden/hcaptcha-rs/target/rls/debug/deps/libscopeguard-1f9532704faef9c2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/gorta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gorta/garden/hcaptcha-rs/target/rls/debug/deps/liblock_api-6ad98de7866ad33e.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[13802218327845487787,1641429766539931812]},"crate_root":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src","external_crates":[{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16851962707842592855,4932765248485690217]}},{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3049591816127030880,10952373373500329976]}},{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11587085401131637304,2097967498245787009]}},{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[11094522125063972432,8514709811731402222]}}],"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":333,"byte_end":4040,"line_start":8,"line_end":109,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3914,"byte_end":3915,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3914,"byte_end":3915,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3914,"byte_end":3915,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":333,"byte_end":4040,"line_start":8,"line_end":109,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":880}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"! This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"! types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"! implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"! generic with regards to different lock implementations.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! Basic usage of this crate is very straightforward:","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"!    data protected by the lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"! 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"! 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"!    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"!    See the [example](#example) below for details.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"! exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"! locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"! use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! // 1. Define our raw lock type","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"! pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! // 2. Implement RawMutex for this type","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"! unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"!     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"!     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"!     type GuardMarker = GuardSend;","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"!     fn lock(&self) {","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"!         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"!         // suffices for the sake of this example.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"!         while !self.try_lock() {}","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"!     }","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!     fn try_lock(&self) -> bool {","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"!         self.0","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2098,"byte_end":2116,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"!             .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2117,"byte_end":2201,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"!             .is_ok()","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2202,"byte_end":2226,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"!     }","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2227,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2237,"byte_end":2240,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"!     unsafe fn unlock(&self) {","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2241,"byte_end":2274,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"!         self.0.store(false, Ordering::Release);","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2275,"byte_end":2326,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"!     }","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2327,"byte_end":2336,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2337,"byte_end":2342,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2343,"byte_end":2346,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2347,"byte_end":2431,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"! pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2432,"byte_end":2491,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"! pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2492,"byte_end":2569,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"! ```","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2570,"byte_end":2577,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2578,"byte_end":2581,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! # Extension traits","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2582,"byte_end":2604,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2605,"byte_end":2608,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"! In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2609,"byte_end":2688,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"! of exposing additional functionality in your lock types by implementing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2689,"byte_end":2764,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"! additional traits for it. Examples of extension features include:","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2765,"byte_end":2834,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2835,"byte_end":2838,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2839,"byte_end":2893,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"! - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2894,"byte_end":2949,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"! - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":2950,"byte_end":3006,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"! - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3007,"byte_end":3056,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"! - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3057,"byte_end":3105,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3110,"byte_end":3189,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"! functionality if the raw lock type implements these extension traits.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3190,"byte_end":3263,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3264,"byte_end":3267,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! # Cargo features","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3268,"byte_end":3288,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3289,"byte_end":3292,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! This crate supports two cargo features:","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3293,"byte_end":3336,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3337,"byte_end":3340,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3341,"byte_end":3423,"line_start":84,"line_end":84,"column_start":1,"column_end":83}},{"value":"! - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3424,"byte_end":3499,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"!   feature is `const fn` constructors for lock types.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3500,"byte_end":3556,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3558,"byte_end":3568,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3569,"byte_end":3591,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3592,"byte_end":3618,"line_start":90,"line_end":90,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3797,"byte_end":3806,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3712,"byte_end":3785,"line_start":96,"line_end":96,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3902,"byte_end":3913,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/lib.rs","byte_start":3813,"byte_end":3890,"line_start":99,"line_end":99,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4986,"byte_end":4994,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4652,"byte_end":4685,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4686,"byte_end":4689,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4690,"byte_end":4765,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4766,"byte_end":4799,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4800,"byte_end":4803,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4804,"byte_end":4816,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4817,"byte_end":4820,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4821,"byte_end":4893,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":4894,"byte_end":4968,"line_start":28,"line_end":28,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5297,"byte_end":5301,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5001,"byte_end":5041,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5238,"byte_end":5286,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5466,"byte_end":5477,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5314,"byte_end":5389,"line_start":36,"line_end":36,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5394,"byte_end":5456,"line_start":37,"line_end":37,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5571,"byte_end":5575,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5484,"byte_end":5563,"line_start":40,"line_end":40,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5733,"byte_end":5741,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5589,"byte_end":5656,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5661,"byte_end":5725,"line_start":44,"line_end":44,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6271,"byte_end":6277,"line_start":58,"line_end":58,"column_start":15,"column_end":21},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub unsafe fn unlock(&Self)","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Unlocks this mutex.","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5763,"byte_end":5786,"line_start":47,"line_end":47,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5791,"byte_end":5794,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5799,"byte_end":5811,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5816,"byte_end":5819,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, i.e. it must","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5824,"byte_end":5916,"line_start":51,"line_end":51,"column_start":5,"column_end":97}},{"value":"/ be paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":5921,"byte_end":6024,"line_start":52,"line_end":52,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6029,"byte_end":6032,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ [`lock`]: #tymethod.lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6037,"byte_end":6065,"line_start":54,"line_end":54,"column_start":5,"column_end":33}},{"value":"/ [`try_lock`]: #tymethod.try_lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6070,"byte_end":6106,"line_start":55,"line_end":55,"column_start":5,"column_end":41}},{"value":"/ [`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6111,"byte_end":6179,"line_start":56,"line_end":56,"column_start":5,"column_end":73}},{"value":"/ [`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6184,"byte_end":6256,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6362,"byte_end":6371,"line_start":62,"line_end":62,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::mutex::RawMutex::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6291,"byte_end":6340,"line_start":60,"line_end":60,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6345,"byte_end":6354,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7019,"byte_end":7031,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6639,"byte_end":6703,"line_start":74,"line_end":74,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6704,"byte_end":6707,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6708,"byte_end":6788,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6789,"byte_end":6864,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6865,"byte_end":6939,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":6940,"byte_end":7001,"line_start":79,"line_end":79,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7341,"byte_end":7352,"line_start":89,"line_end":89,"column_start":15,"column_end":26},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7048,"byte_end":7100,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7105,"byte_end":7108,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7113,"byte_end":7125,"line_start":83,"line_end":83,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7130,"byte_end":7133,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7138,"byte_end":7221,"line_start":85,"line_end":85,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7226,"byte_end":7262,"line_start":86,"line_end":86,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7267,"byte_end":7270,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7275,"byte_end":7326,"line_start":88,"line_end":88,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7878,"byte_end":7882,"line_start":103,"line_end":103,"column_start":15,"column_end":19},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub unsafe fn bump(&Self)","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7366,"byte_end":7435,"line_start":91,"line_end":91,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7440,"byte_end":7443,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7448,"byte_end":7524,"line_start":93,"line_end":93,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7529,"byte_end":7605,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7610,"byte_end":7637,"line_start":95,"line_end":95,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7642,"byte_end":7645,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7650,"byte_end":7662,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7667,"byte_end":7670,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7675,"byte_end":7758,"line_start":99,"line_end":99,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7763,"byte_end":7799,"line_start":100,"line_end":100,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7804,"byte_end":7807,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7812,"byte_end":7863,"line_start":102,"line_end":102,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":29},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8180,"byte_end":8193,"line_start":113,"line_end":113,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7950,"byte_end":8021,"line_start":109,"line_end":109,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8022,"byte_end":8025,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8026,"byte_end":8106,"line_start":111,"line_end":111,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8107,"byte_end":8162,"line_start":112,"line_end":112,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8262,"byte_end":8270,"line_start":115,"line_end":115,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8210,"byte_end":8252,"line_start":114,"line_end":114,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8330,"byte_end":8337,"line_start":118,"line_end":118,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8277,"byte_end":8320,"line_start":117,"line_end":117,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8413,"byte_end":8425,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8344,"byte_end":8405,"line_start":120,"line_end":120,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8541,"byte_end":8555,"line_start":124,"line_end":124,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8472,"byte_end":8533,"line_start":123,"line_end":123,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9109,"byte_end":9114,"line_start":135,"line_end":135,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8599,"byte_end":8665,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8666,"byte_end":8669,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8670,"byte_end":8749,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8750,"byte_end":8817,"line_start":130,"line_end":130,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8818,"byte_end":8897,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8898,"byte_end":8973,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8974,"byte_end":9053,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9054,"byte_end":9097,"line_start":134,"line_end":134,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9736,"byte_end":9739,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9614,"byte_end":9673,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9678,"byte_end":9710,"line_start":155,"line_end":155,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9715,"byte_end":9724,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9949,"byte_end":9959,"line_start":166,"line_end":166,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9868,"byte_end":9923,"line_start":164,"line_end":164,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9928,"byte_end":9937,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10215,"byte_end":10224,"line_start":176,"line_end":176,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"pub const fn const_new(R, T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"/ Creates a new mutex based on a pre-existing raw mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10042,"byte_end":10100,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10105,"byte_end":10108,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10113,"byte_end":10183,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10188,"byte_end":10197,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11196,"byte_end":11200,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10658,"byte_end":10734,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10739,"byte_end":10742,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10747,"byte_end":10825,"line_start":198,"line_end":198,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10830,"byte_end":10905,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10910,"byte_end":10986,"line_start":200,"line_end":200,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10991,"byte_end":11051,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11056,"byte_end":11059,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11064,"byte_end":11140,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11145,"byte_end":11170,"line_start":204,"line_end":204,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11175,"byte_end":11184,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11654,"byte_end":11662,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11352,"byte_end":11386,"line_start":212,"line_end":212,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11391,"byte_end":11394,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11399,"byte_end":11475,"line_start":214,"line_end":214,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11480,"byte_end":11556,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11561,"byte_end":11582,"line_start":216,"line_end":216,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11587,"byte_end":11590,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11595,"byte_end":11628,"line_start":218,"line_end":218,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11633,"byte_end":11642,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12135,"byte_end":12142,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11888,"byte_end":11943,"line_start":229,"line_end":229,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11948,"byte_end":11951,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":11956,"byte_end":12031,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12036,"byte_end":12109,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12114,"byte_end":12123,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12293,"byte_end":12302,"line_start":240,"line_end":240,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12218,"byte_end":12267,"line_start":238,"line_end":238,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12272,"byte_end":12281,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12868,"byte_end":12880,"line_start":256,"line_end":256,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12360,"byte_end":12391,"line_start":244,"line_end":244,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12396,"byte_end":12399,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12404,"byte_end":12478,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12483,"byte_end":12553,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12558,"byte_end":12579,"line_start":248,"line_end":248,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12584,"byte_end":12587,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12592,"byte_end":12604,"line_start":250,"line_end":250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12609,"byte_end":12612,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12617,"byte_end":12691,"line_start":252,"line_end":252,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12696,"byte_end":12765,"line_start":253,"line_end":253,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12770,"byte_end":12835,"line_start":254,"line_end":254,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12840,"byte_end":12849,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13317,"byte_end":13320,"line_start":270,"line_end":270,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12928,"byte_end":12972,"line_start":260,"line_end":260,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12977,"byte_end":12980,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":12985,"byte_end":13060,"line_start":262,"line_end":262,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13065,"byte_end":13126,"line_start":263,"line_end":263,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13131,"byte_end":13134,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13139,"byte_end":13151,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13156,"byte_end":13159,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13164,"byte_end":13231,"line_start":267,"line_end":267,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13236,"byte_end":13284,"line_start":268,"line_end":268,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13289,"byte_end":13298,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13890,"byte_end":13898,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<Mutex<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13365,"byte_end":13414,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13419,"byte_end":13422,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13427,"byte_end":13501,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13506,"byte_end":13576,"line_start":277,"line_end":277,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13581,"byte_end":13602,"line_start":278,"line_end":278,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13607,"byte_end":13610,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13615,"byte_end":13627,"line_start":280,"line_end":280,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13632,"byte_end":13635,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13640,"byte_end":13711,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13716,"byte_end":13786,"line_start":283,"line_end":283,"column_start":5,"column_end":75}},{"value":"/ a `MutexGuard` but that guard has been discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13791,"byte_end":13864,"line_start":284,"line_end":284,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13869,"byte_end":13878,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14539,"byte_end":14556,"line_start":304,"line_end":304,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14002,"byte_end":14062,"line_start":292,"line_end":292,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14067,"byte_end":14070,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14075,"byte_end":14149,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14154,"byte_end":14224,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14229,"byte_end":14250,"line_start":296,"line_end":296,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14255,"byte_end":14258,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14263,"byte_end":14275,"line_start":298,"line_end":298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14280,"byte_end":14283,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14288,"byte_end":14362,"line_start":300,"line_end":300,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14367,"byte_end":14436,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14441,"byte_end":14506,"line_start":302,"line_end":302,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14511,"byte_end":14520,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14956,"byte_end":14968,"line_start":316,"line_end":316,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14659,"byte_end":14720,"line_start":310,"line_end":310,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14725,"byte_end":14728,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14733,"byte_end":14803,"line_start":312,"line_end":312,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14808,"byte_end":14883,"line_start":313,"line_end":313,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14888,"byte_end":14930,"line_start":314,"line_end":314,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14935,"byte_end":14944,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15524,"byte_end":15538,"line_start":331,"line_end":331,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15227,"byte_end":15288,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15293,"byte_end":15296,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15301,"byte_end":15371,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15376,"byte_end":15451,"line_start":328,"line_end":328,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15456,"byte_end":15498,"line_start":329,"line_end":329,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15503,"byte_end":15512,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17746,"byte_end":17756,"line_start":410,"line_end":410,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17406,"byte_end":17486,"line_start":404,"line_end":404,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17487,"byte_end":17547,"line_start":405,"line_end":405,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17548,"byte_end":17551,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17552,"byte_end":17630,"line_start":407,"line_end":407,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17631,"byte_end":17674,"line_start":408,"line_end":408,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17675,"byte_end":17734,"line_start":409,"line_end":409,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18107,"byte_end":18112,"line_start":419,"line_end":419,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18040,"byte_end":18095,"line_start":418,"line_end":418,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18577,"byte_end":18580,"line_start":432,"line_end":432,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18171,"byte_end":18241,"line_start":423,"line_end":423,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18246,"byte_end":18249,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18254,"byte_end":18311,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18316,"byte_end":18348,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18353,"byte_end":18356,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18361,"byte_end":18412,"line_start":428,"line_end":428,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18417,"byte_end":18493,"line_start":429,"line_end":429,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18498,"byte_end":18551,"line_start":430,"line_end":430,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18556,"byte_end":18565,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19415,"byte_end":19422,"line_start":456,"line_end":456,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18924,"byte_end":18992,"line_start":446,"line_end":446,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18997,"byte_end":19075,"line_start":447,"line_end":447,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19080,"byte_end":19083,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19088,"byte_end":19145,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19150,"byte_end":19182,"line_start":450,"line_end":450,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19187,"byte_end":19190,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19195,"byte_end":19246,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19251,"byte_end":19331,"line_start":453,"line_end":453,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19336,"byte_end":19389,"line_start":454,"line_end":454,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19394,"byte_end":19403,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20103,"byte_end":20111,"line_start":478,"line_end":478,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19877,"byte_end":19941,"line_start":473,"line_end":473,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19946,"byte_end":19949,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":19954,"byte_end":20022,"line_start":475,"line_end":475,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20027,"byte_end":20077,"line_start":476,"line_end":476,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20082,"byte_end":20091,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21213,"byte_end":21224,"line_start":505,"line_end":505,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20432,"byte_end":20483,"line_start":492,"line_end":492,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20488,"byte_end":20491,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20496,"byte_end":20570,"line_start":494,"line_end":494,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20575,"byte_end":20647,"line_start":495,"line_end":495,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20652,"byte_end":20726,"line_start":496,"line_end":496,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20731,"byte_end":20806,"line_start":497,"line_end":497,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20811,"byte_end":20882,"line_start":498,"line_end":498,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20887,"byte_end":20944,"line_start":499,"line_end":499,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20949,"byte_end":20952,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20957,"byte_end":21033,"line_start":501,"line_end":501,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21038,"byte_end":21114,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21119,"byte_end":21187,"line_start":503,"line_end":503,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21192,"byte_end":21201,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21686,"byte_end":21699,"line_start":520,"line_end":520,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21392,"byte_end":21456,"line_start":513,"line_end":513,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21461,"byte_end":21464,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21469,"byte_end":21524,"line_start":515,"line_end":515,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21529,"byte_end":21532,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21537,"byte_end":21605,"line_start":517,"line_end":517,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21610,"byte_end":21660,"line_start":518,"line_end":518,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21665,"byte_end":21674,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22250,"byte_end":22254,"line_start":538,"line_end":538,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":21953,"byte_end":22022,"line_start":532,"line_end":532,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22027,"byte_end":22030,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22035,"byte_end":22111,"line_start":534,"line_end":534,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22116,"byte_end":22192,"line_start":535,"line_end":535,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22197,"byte_end":22224,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22229,"byte_end":22238,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":149},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23972,"byte_end":23988,"line_start":594,"line_end":594,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23536,"byte_end":23611,"line_start":586,"line_end":586,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23612,"byte_end":23647,"line_start":587,"line_end":587,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23648,"byte_end":23651,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23652,"byte_end":23731,"line_start":589,"line_end":589,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23732,"byte_end":23807,"line_start":590,"line_end":590,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23808,"byte_end":23888,"line_start":591,"line_end":591,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23889,"byte_end":23900,"line_start":592,"line_end":592,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23901,"byte_end":23960,"line_start":593,"line_end":593,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24816,"byte_end":24819,"line_start":619,"line_end":619,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24398,"byte_end":24468,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24473,"byte_end":24476,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24481,"byte_end":24544,"line_start":612,"line_end":612,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24549,"byte_end":24581,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24586,"byte_end":24589,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24594,"byte_end":24645,"line_start":615,"line_end":615,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24650,"byte_end":24732,"line_start":616,"line_end":616,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24737,"byte_end":24790,"line_start":617,"line_end":617,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24795,"byte_end":24804,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25647,"byte_end":25654,"line_start":643,"line_end":643,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25144,"byte_end":25212,"line_start":633,"line_end":633,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25217,"byte_end":25295,"line_start":634,"line_end":634,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25300,"byte_end":25303,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25308,"byte_end":25371,"line_start":636,"line_end":636,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25376,"byte_end":25408,"line_start":637,"line_end":637,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25413,"byte_end":25416,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25421,"byte_end":25472,"line_start":639,"line_end":639,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25477,"byte_end":25563,"line_start":640,"line_end":640,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25568,"byte_end":25621,"line_start":641,"line_end":641,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":25626,"byte_end":25635,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26949,"byte_end":26960,"line_start":675,"line_end":675,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26168,"byte_end":26219,"line_start":662,"line_end":662,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26224,"byte_end":26227,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26232,"byte_end":26306,"line_start":664,"line_end":664,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26311,"byte_end":26383,"line_start":665,"line_end":665,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26388,"byte_end":26462,"line_start":666,"line_end":666,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26467,"byte_end":26542,"line_start":667,"line_end":667,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26547,"byte_end":26618,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26623,"byte_end":26680,"line_start":669,"line_end":669,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26685,"byte_end":26688,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26693,"byte_end":26769,"line_start":671,"line_end":671,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26774,"byte_end":26850,"line_start":672,"line_end":672,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26855,"byte_end":26923,"line_start":673,"line_end":673,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26928,"byte_end":26937,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":225},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29421,"byte_end":29432,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29020,"byte_end":29072,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29073,"byte_end":29076,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29077,"byte_end":29151,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29152,"byte_end":29178,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29179,"byte_end":29182,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29183,"byte_end":29195,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29196,"byte_end":29199,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29200,"byte_end":29278,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29279,"byte_end":29352,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29353,"byte_end":29403,"line_start":37,"line_end":37,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":226},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29713,"byte_end":29717,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29439,"byte_end":29457,"line_start":39,"line_end":39,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29654,"byte_end":29702,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29828,"byte_end":29845,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29730,"byte_end":29801,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29806,"byte_end":29820,"line_start":46,"line_end":46,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":228},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30413,"byte_end":30430,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"RawReentrantMutex","qualname":"::remutex::RawReentrantMutex","value":"RawReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":" A raw mutex type that wraps another raw mutex to provide reentrancy.","sig":null,"attributes":[{"value":"/ A raw mutex type that wraps another raw mutex to provide reentrancy.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29873,"byte_end":29945,"line_start":50,"line_end":50,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29946,"byte_end":29949,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Although this has the same methods as the [`RawMutex`] trait, it does","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":29950,"byte_end":30023,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ not implement it, and should not be used in the same way, since this","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30024,"byte_end":30096,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ mutex can successfully acquire a lock multiple times in the same thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30097,"byte_end":30173,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ Only use this when you know you want a raw mutex that can be locked","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30174,"byte_end":30245,"line_start":55,"line_end":55,"column_start":1,"column_end":72}},{"value":"/ reentrantly; you probably want [`ReentrantMutex`] instead.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30246,"byte_end":30308,"line_start":56,"line_end":56,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30309,"byte_end":30312,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ [`RawMutex`]: trait.RawMutex.html","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30313,"byte_end":30350,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/ [`ReentrantMutex`]: struct.ReentrantMutex.html","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30351,"byte_end":30401,"line_start":59,"line_end":59,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30886,"byte_end":30890,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"name":"INIT","qualname":"::remutex::RawReentrantMutex::<R, G>::INIT","value":"Self","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30778,"byte_end":30818,"line_start":71,"line_end":71,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30823,"byte_end":30871,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":31826,"byte_end":31830,"line_start":103,"line_end":103,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawReentrantMutex<R, G>>::lock","value":"pub fn lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking if it's held by another thread.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking if it's held by another thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":31735,"byte_end":31800,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":31805,"byte_end":31814,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32105,"byte_end":32113,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<RawReentrantMutex<R, G>>::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":31943,"byte_end":32010,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32015,"byte_end":32079,"line_start":111,"line_end":111,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32084,"byte_end":32093,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32472,"byte_end":32478,"line_start":124,"line_end":124,"column_start":19,"column_end":25},"name":"unlock","qualname":"<RawReentrantMutex<R, G>>::unlock","value":"pub unsafe fn unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex. The inner mutex may not be unlocked if\n this mutex was acquired previously in the current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex. The inner mutex may not be unlocked if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32195,"byte_end":32257,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"/ this mutex was acquired previously in the current thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32262,"byte_end":32323,"line_start":118,"line_end":118,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32328,"byte_end":32331,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32336,"byte_end":32348,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32353,"byte_end":32356,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32361,"byte_end":32439,"line_start":122,"line_end":122,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32444,"byte_end":32453,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32791,"byte_end":32800,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RawReentrantMutex<R, G>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32716,"byte_end":32765,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32770,"byte_end":32779,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33240,"byte_end":33251,"line_start":149,"line_end":149,"column_start":19,"column_end":30},"name":"unlock_fair","qualname":"<RawReentrantMutex<R, G>>::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol. The inner mutex\n may not be unlocked if this mutex was acquired previously in the\n current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol. The inner mutex","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32926,"byte_end":32994,"line_start":141,"line_end":141,"column_start":5,"column_end":73}},{"value":"/ may not be unlocked if this mutex was acquired previously in the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32999,"byte_end":33067,"line_start":142,"line_end":142,"column_start":5,"column_end":73}},{"value":"/ current thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33072,"byte_end":33091,"line_start":143,"line_end":143,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33096,"byte_end":33099,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33104,"byte_end":33116,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33121,"byte_end":33124,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33129,"byte_end":33207,"line_start":147,"line_end":147,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33212,"byte_end":33221,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33914,"byte_end":33918,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"name":"bump","qualname":"<RawReentrantMutex<R, G>>::bump","value":"pub unsafe fn bump(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33494,"byte_end":33563,"line_start":158,"line_end":158,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33568,"byte_end":33571,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33576,"byte_end":33652,"line_start":160,"line_end":160,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33657,"byte_end":33733,"line_start":161,"line_end":161,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33738,"byte_end":33765,"line_start":162,"line_end":162,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33770,"byte_end":33773,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33778,"byte_end":33790,"line_start":164,"line_end":164,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33795,"byte_end":33798,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33803,"byte_end":33881,"line_start":166,"line_end":166,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":33886,"byte_end":33895,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34336,"byte_end":34350,"line_start":181,"line_end":181,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<RawReentrantMutex<R, G>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34249,"byte_end":34310,"line_start":179,"line_end":179,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34315,"byte_end":34324,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34553,"byte_end":34565,"line_start":187,"line_end":187,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<RawReentrantMutex<R, G>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34466,"byte_end":34527,"line_start":185,"line_end":185,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34532,"byte_end":34541,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35153,"byte_end":35167,"line_start":203,"line_end":203,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34678,"byte_end":34741,"line_start":192,"line_end":192,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34742,"byte_end":34745,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34746,"byte_end":34816,"line_start":194,"line_end":194,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34817,"byte_end":34820,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34821,"byte_end":34901,"line_start":196,"line_end":196,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34902,"byte_end":34920,"line_start":197,"line_end":197,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34921,"byte_end":35001,"line_start":198,"line_end":198,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35002,"byte_end":35041,"line_start":199,"line_end":199,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35042,"byte_end":35045,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35046,"byte_end":35126,"line_start":201,"line_end":201,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35127,"byte_end":35141,"line_start":202,"line_end":202,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36147,"byte_end":36150,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36015,"byte_end":36084,"line_start":233,"line_end":233,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36089,"byte_end":36121,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36126,"byte_end":36135,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36565,"byte_end":36575,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36484,"byte_end":36539,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36544,"byte_end":36553,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36916,"byte_end":36925,"line_start":262,"line_end":262,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"pub const fn const_new(R, G, T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex based on a pre-existing raw mutex and a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36673,"byte_end":36746,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/ helper to get the thread ID.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36751,"byte_end":36783,"line_start":257,"line_end":257,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36788,"byte_end":36791,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36796,"byte_end":36870,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ Rust.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36875,"byte_end":36884,"line_start":260,"line_end":260,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36889,"byte_end":36898,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38264,"byte_end":38268,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37625,"byte_end":37701,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37706,"byte_end":37719,"line_start":288,"line_end":288,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37724,"byte_end":37727,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37732,"byte_end":37808,"line_start":290,"line_end":290,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37813,"byte_end":37889,"line_start":291,"line_end":291,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37894,"byte_end":37970,"line_start":292,"line_end":292,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37975,"byte_end":38039,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38044,"byte_end":38115,"line_start":294,"line_end":294,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38120,"byte_end":38195,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38200,"byte_end":38238,"line_start":296,"line_end":296,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38243,"byte_end":38252,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38734,"byte_end":38742,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38432,"byte_end":38466,"line_start":304,"line_end":304,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38471,"byte_end":38474,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38479,"byte_end":38555,"line_start":306,"line_end":306,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38560,"byte_end":38636,"line_start":307,"line_end":307,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38641,"byte_end":38662,"line_start":308,"line_end":308,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38667,"byte_end":38670,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38675,"byte_end":38708,"line_start":310,"line_end":310,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38713,"byte_end":38722,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39236,"byte_end":39243,"line_start":326,"line_end":326,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":38980,"byte_end":39035,"line_start":321,"line_end":321,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39040,"byte_end":39043,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39048,"byte_end":39132,"line_start":323,"line_end":323,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39137,"byte_end":39210,"line_start":324,"line_end":324,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39215,"byte_end":39224,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39394,"byte_end":39403,"line_start":332,"line_end":332,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<ReentrantMutex<R, G, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39319,"byte_end":39368,"line_start":330,"line_end":330,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39373,"byte_end":39382,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39987,"byte_end":39999,"line_start":348,"line_end":348,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39461,"byte_end":39492,"line_start":336,"line_end":336,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39497,"byte_end":39500,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39505,"byte_end":39579,"line_start":338,"line_end":338,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39584,"byte_end":39663,"line_start":339,"line_end":339,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39668,"byte_end":39689,"line_start":340,"line_end":340,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39694,"byte_end":39697,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39702,"byte_end":39714,"line_start":342,"line_end":342,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39719,"byte_end":39722,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39727,"byte_end":39801,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39806,"byte_end":39884,"line_start":345,"line_end":345,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39889,"byte_end":39954,"line_start":346,"line_end":346,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":39959,"byte_end":39968,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40445,"byte_end":40448,"line_start":362,"line_end":362,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40047,"byte_end":40091,"line_start":352,"line_end":352,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40096,"byte_end":40099,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40104,"byte_end":40179,"line_start":354,"line_end":354,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40184,"byte_end":40245,"line_start":355,"line_end":355,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40250,"byte_end":40253,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40258,"byte_end":40270,"line_start":357,"line_end":357,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40275,"byte_end":40278,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40283,"byte_end":40350,"line_start":359,"line_end":359,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40355,"byte_end":40412,"line_start":360,"line_end":360,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40417,"byte_end":40426,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41050,"byte_end":41058,"line_start":379,"line_end":379,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<ReentrantMutex<R, G, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40499,"byte_end":40548,"line_start":366,"line_end":366,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40553,"byte_end":40556,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40561,"byte_end":40635,"line_start":368,"line_end":368,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40640,"byte_end":40714,"line_start":369,"line_end":369,"column_start":5,"column_end":79}},{"value":"/ when dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40719,"byte_end":40745,"line_start":370,"line_end":370,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40750,"byte_end":40753,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40758,"byte_end":40770,"line_start":372,"line_end":372,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40775,"byte_end":40778,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40783,"byte_end":40854,"line_start":374,"line_end":374,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40859,"byte_end":40931,"line_start":375,"line_end":375,"column_start":5,"column_end":77}},{"value":"/ `ReentrantMutexGuard` but that guard has been discarded using","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":40936,"byte_end":41001,"line_start":376,"line_end":376,"column_start":5,"column_end":70}},{"value":"/ `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41006,"byte_end":41024,"line_start":377,"line_end":377,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41029,"byte_end":41038,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41745,"byte_end":41762,"line_start":397,"line_end":397,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41190,"byte_end":41250,"line_start":385,"line_end":385,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41255,"byte_end":41258,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41263,"byte_end":41337,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41342,"byte_end":41421,"line_start":388,"line_end":388,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41426,"byte_end":41447,"line_start":389,"line_end":389,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41452,"byte_end":41455,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41460,"byte_end":41472,"line_start":391,"line_end":391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41477,"byte_end":41480,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41485,"byte_end":41559,"line_start":393,"line_end":393,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41564,"byte_end":41642,"line_start":394,"line_end":394,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41647,"byte_end":41712,"line_start":395,"line_end":395,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41717,"byte_end":41726,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42190,"byte_end":42202,"line_start":409,"line_end":409,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41893,"byte_end":41954,"line_start":403,"line_end":403,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41959,"byte_end":41962,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41967,"byte_end":42037,"line_start":405,"line_end":405,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42042,"byte_end":42117,"line_start":406,"line_end":406,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42122,"byte_end":42164,"line_start":407,"line_end":407,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42169,"byte_end":42178,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42770,"byte_end":42784,"line_start":424,"line_end":424,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42473,"byte_end":42534,"line_start":418,"line_end":418,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42539,"byte_end":42542,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42547,"byte_end":42617,"line_start":420,"line_end":420,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42622,"byte_end":42697,"line_start":421,"line_end":421,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42702,"byte_end":42744,"line_start":422,"line_end":422,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":42749,"byte_end":42758,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":332},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45281,"byte_end":45300,"line_start":508,"line_end":508,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":44938,"byte_end":45025,"line_start":502,"line_end":502,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45026,"byte_end":45089,"line_start":503,"line_end":503,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45090,"byte_end":45093,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45094,"byte_end":45172,"line_start":505,"line_end":505,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45173,"byte_end":45200,"line_start":506,"line_end":506,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45201,"byte_end":45269,"line_start":507,"line_end":507,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45761,"byte_end":45768,"line_start":520,"line_end":520,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45685,"byte_end":45749,"line_start":519,"line_end":519,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46274,"byte_end":46277,"line_start":533,"line_end":533,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45841,"byte_end":45920,"line_start":524,"line_end":524,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45925,"byte_end":45928,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45933,"byte_end":45999,"line_start":526,"line_end":526,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46004,"byte_end":46036,"line_start":527,"line_end":527,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46041,"byte_end":46044,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46049,"byte_end":46100,"line_start":529,"line_end":529,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46105,"byte_end":46190,"line_start":530,"line_end":530,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46195,"byte_end":46248,"line_start":531,"line_end":531,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46253,"byte_end":46262,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47147,"byte_end":47154,"line_start":557,"line_end":557,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46634,"byte_end":46712,"line_start":547,"line_end":547,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46717,"byte_end":46793,"line_start":548,"line_end":548,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46798,"byte_end":46801,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46806,"byte_end":46872,"line_start":550,"line_end":550,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46877,"byte_end":46909,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46914,"byte_end":46917,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46922,"byte_end":46973,"line_start":553,"line_end":553,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":46978,"byte_end":47063,"line_start":554,"line_end":554,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47068,"byte_end":47121,"line_start":555,"line_end":555,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47126,"byte_end":47135,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47883,"byte_end":47891,"line_start":582,"line_end":582,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47657,"byte_end":47721,"line_start":577,"line_end":577,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47726,"byte_end":47729,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47734,"byte_end":47802,"line_start":579,"line_end":579,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47807,"byte_end":47857,"line_start":580,"line_end":580,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":47862,"byte_end":47871,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49052,"byte_end":49063,"line_start":611,"line_end":611,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48262,"byte_end":48313,"line_start":598,"line_end":598,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48318,"byte_end":48321,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48326,"byte_end":48400,"line_start":600,"line_end":600,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48405,"byte_end":48477,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48482,"byte_end":48556,"line_start":602,"line_end":602,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48561,"byte_end":48636,"line_start":603,"line_end":603,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48641,"byte_end":48712,"line_start":604,"line_end":604,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48717,"byte_end":48774,"line_start":605,"line_end":605,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48779,"byte_end":48782,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48787,"byte_end":48863,"line_start":607,"line_end":607,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48868,"byte_end":48944,"line_start":608,"line_end":608,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48949,"byte_end":49026,"line_start":609,"line_end":609,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49031,"byte_end":49040,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49529,"byte_end":49542,"line_start":626,"line_end":626,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49241,"byte_end":49305,"line_start":619,"line_end":619,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49310,"byte_end":49313,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49318,"byte_end":49367,"line_start":621,"line_end":621,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49372,"byte_end":49375,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49380,"byte_end":49448,"line_start":623,"line_end":623,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49453,"byte_end":49503,"line_start":624,"line_end":624,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49508,"byte_end":49517,"line_start":625,"line_end":625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50105,"byte_end":50109,"line_start":644,"line_end":644,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49808,"byte_end":49877,"line_start":638,"line_end":638,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49882,"byte_end":49885,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49890,"byte_end":49966,"line_start":640,"line_end":640,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":49971,"byte_end":50047,"line_start":641,"line_end":641,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50052,"byte_end":50079,"line_start":642,"line_end":642,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50084,"byte_end":50093,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51883,"byte_end":51908,"line_start":704,"line_end":704,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51411,"byte_end":51495,"line_start":696,"line_end":696,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51496,"byte_end":51531,"line_start":697,"line_end":697,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51532,"byte_end":51535,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51536,"byte_end":51633,"line_start":699,"line_end":699,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51634,"byte_end":51709,"line_start":700,"line_end":700,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51710,"byte_end":51790,"line_start":701,"line_end":701,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51791,"byte_end":51802,"line_start":702,"line_end":702,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51803,"byte_end":51871,"line_start":703,"line_end":703,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52755,"byte_end":52758,"line_start":727,"line_end":727,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52310,"byte_end":52389,"line_start":718,"line_end":718,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52394,"byte_end":52397,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52402,"byte_end":52474,"line_start":720,"line_end":720,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52479,"byte_end":52511,"line_start":721,"line_end":721,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52516,"byte_end":52519,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52524,"byte_end":52575,"line_start":723,"line_end":723,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52580,"byte_end":52671,"line_start":724,"line_end":724,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52676,"byte_end":52729,"line_start":725,"line_end":725,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52734,"byte_end":52743,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53617,"byte_end":53624,"line_start":751,"line_end":751,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53092,"byte_end":53170,"line_start":741,"line_end":741,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53175,"byte_end":53251,"line_start":742,"line_end":742,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53256,"byte_end":53259,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53264,"byte_end":53336,"line_start":744,"line_end":744,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53341,"byte_end":53373,"line_start":745,"line_end":745,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53378,"byte_end":53381,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53386,"byte_end":53437,"line_start":747,"line_end":747,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53442,"byte_end":53533,"line_start":748,"line_end":748,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53538,"byte_end":53591,"line_start":749,"line_end":749,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":53596,"byte_end":53605,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54997,"byte_end":55008,"line_start":788,"line_end":788,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54207,"byte_end":54258,"line_start":775,"line_end":775,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54263,"byte_end":54266,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54271,"byte_end":54345,"line_start":777,"line_end":777,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54350,"byte_end":54422,"line_start":778,"line_end":778,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54427,"byte_end":54501,"line_start":779,"line_end":779,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54506,"byte_end":54581,"line_start":780,"line_end":780,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54586,"byte_end":54657,"line_start":781,"line_end":781,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54662,"byte_end":54719,"line_start":782,"line_end":782,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54724,"byte_end":54727,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54732,"byte_end":54808,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54813,"byte_end":54889,"line_start":785,"line_end":785,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54894,"byte_end":54971,"line_start":786,"line_end":786,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54976,"byte_end":54985,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57405,"byte_end":57414,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":56958,"byte_end":57004,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57005,"byte_end":57008,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57009,"byte_end":57085,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57086,"byte_end":57122,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57123,"byte_end":57126,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57127,"byte_end":57139,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57140,"byte_end":57143,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57144,"byte_end":57219,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57220,"byte_end":57299,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57300,"byte_end":57375,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57376,"byte_end":57387,"line_start":30,"line_end":30,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57720,"byte_end":57724,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57421,"byte_end":57464,"line_start":32,"line_end":32,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57661,"byte_end":57709,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":460},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57889,"byte_end":57900,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57737,"byte_end":57812,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57817,"byte_end":57879,"line_start":39,"line_end":39,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57997,"byte_end":58008,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":57907,"byte_end":57989,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58085,"byte_end":58100,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58022,"byte_end":58077,"line_start":45,"line_end":45,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58285,"byte_end":58298,"line_start":53,"line_end":53,"column_start":15,"column_end":28},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub unsafe fn unlock_shared(&Self)","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Releases a shared lock.","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58122,"byte_end":58149,"line_start":48,"line_end":48,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58154,"byte_end":58157,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58162,"byte_end":58174,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58179,"byte_end":58182,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58187,"byte_end":58270,"line_start":52,"line_end":52,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58406,"byte_end":58420,"line_start":56,"line_end":56,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58312,"byte_end":58398,"line_start":55,"line_end":55,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58501,"byte_end":58519,"line_start":59,"line_end":59,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58434,"byte_end":58493,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58712,"byte_end":58728,"line_start":66,"line_end":66,"column_start":15,"column_end":31},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub unsafe fn unlock_exclusive(&Self)","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58541,"byte_end":58572,"line_start":61,"line_end":61,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58577,"byte_end":58580,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58585,"byte_end":58597,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58602,"byte_end":58605,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58610,"byte_end":58697,"line_start":65,"line_end":65,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58823,"byte_end":58832,"line_start":70,"line_end":70,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::rwlock::RawRwLock::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Checks if this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks if this `RwLock` is currently locked in any way.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58742,"byte_end":58801,"line_start":68,"line_end":68,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":58806,"byte_end":58815,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59493,"byte_end":59506,"line_start":88,"line_end":88,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59113,"byte_end":59177,"line_start":82,"line_end":82,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59178,"byte_end":59181,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59182,"byte_end":59262,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59263,"byte_end":59338,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59339,"byte_end":59413,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59414,"byte_end":59475,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59716,"byte_end":59734,"line_start":94,"line_end":94,"column_start":15,"column_end":33},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub unsafe fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59524,"byte_end":59580,"line_start":89,"line_end":89,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59585,"byte_end":59588,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59593,"byte_end":59605,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59610,"byte_end":59613,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59618,"byte_end":59701,"line_start":93,"line_end":93,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59948,"byte_end":59969,"line_start":101,"line_end":101,"column_start":15,"column_end":36},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub unsafe fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59748,"byte_end":59808,"line_start":96,"line_end":96,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59813,"byte_end":59816,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59821,"byte_end":59833,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59838,"byte_end":59841,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59846,"byte_end":59933,"line_start":100,"line_end":100,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60408,"byte_end":60419,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub unsafe fn bump_shared(&Self)","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59983,"byte_end":60056,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60061,"byte_end":60064,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60069,"byte_end":60152,"line_start":105,"line_end":105,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60157,"byte_end":60240,"line_start":106,"line_end":106,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60245,"byte_end":60272,"line_start":107,"line_end":107,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60277,"byte_end":60280,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60285,"byte_end":60297,"line_start":109,"line_end":109,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60302,"byte_end":60305,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60310,"byte_end":60393,"line_start":111,"line_end":111,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60942,"byte_end":60956,"line_start":126,"line_end":126,"column_start":15,"column_end":29},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub unsafe fn bump_exclusive(&Self)","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60503,"byte_end":60580,"line_start":117,"line_end":117,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60585,"byte_end":60588,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60593,"byte_end":60679,"line_start":119,"line_end":119,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60684,"byte_end":60770,"line_start":120,"line_end":120,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60775,"byte_end":60802,"line_start":121,"line_end":121,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60807,"byte_end":60810,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60815,"byte_end":60827,"line_start":123,"line_end":123,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60832,"byte_end":60835,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":60840,"byte_end":60927,"line_start":125,"line_end":125,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":473},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61173,"byte_end":61191,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":474}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61044,"byte_end":61118,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61119,"byte_end":61155,"line_start":133,"line_end":133,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61490,"byte_end":61499,"line_start":141,"line_end":141,"column_start":15,"column_end":24},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub unsafe fn downgrade(&Self)","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61209,"byte_end":61279,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61284,"byte_end":61350,"line_start":136,"line_end":136,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61355,"byte_end":61358,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61363,"byte_end":61375,"line_start":138,"line_end":138,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61380,"byte_end":61383,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61388,"byte_end":61475,"line_start":140,"line_end":140,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":475},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61741,"byte_end":61755,"line_start":148,"line_end":148,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61511,"byte_end":61582,"line_start":144,"line_end":144,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61583,"byte_end":61586,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61587,"byte_end":61667,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61668,"byte_end":61723,"line_start":147,"line_end":147,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":476},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61825,"byte_end":61833,"line_start":150,"line_end":150,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61773,"byte_end":61815,"line_start":149,"line_end":149,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":477},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61893,"byte_end":61900,"line_start":153,"line_end":153,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61840,"byte_end":61883,"line_start":152,"line_end":152,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61980,"byte_end":61999,"line_start":156,"line_end":156,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61907,"byte_end":61972,"line_start":155,"line_end":155,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62119,"byte_end":62140,"line_start":159,"line_end":159,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62046,"byte_end":62111,"line_start":158,"line_end":158,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62263,"byte_end":62285,"line_start":162,"line_end":162,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62186,"byte_end":62255,"line_start":161,"line_end":161,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62409,"byte_end":62433,"line_start":165,"line_end":165,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62332,"byte_end":62401,"line_start":164,"line_end":164,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":482},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62866,"byte_end":62884,"line_start":175,"line_end":175,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62477,"byte_end":62547,"line_start":168,"line_end":168,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62548,"byte_end":62551,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62552,"byte_end":62607,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62608,"byte_end":62683,"line_start":171,"line_end":171,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62684,"byte_end":62755,"line_start":172,"line_end":172,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62756,"byte_end":62830,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62831,"byte_end":62848,"line_start":174,"line_end":174,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62985,"byte_end":63006,"line_start":177,"line_end":177,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62902,"byte_end":62977,"line_start":176,"line_end":176,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63114,"byte_end":63139,"line_start":180,"line_end":180,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63020,"byte_end":63106,"line_start":179,"line_end":179,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":485},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63260,"byte_end":63283,"line_start":184,"line_end":184,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63159,"byte_end":63242,"line_start":183,"line_end":183,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63457,"byte_end":63486,"line_start":187,"line_end":187,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63327,"byte_end":63400,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63405,"byte_end":63449,"line_start":186,"line_end":186,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63663,"byte_end":63694,"line_start":191,"line_end":191,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63533,"byte_end":63606,"line_start":189,"line_end":189,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63611,"byte_end":63655,"line_start":190,"line_end":190,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":488},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64070,"byte_end":64086,"line_start":200,"line_end":200,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63738,"byte_end":63816,"line_start":194,"line_end":194,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63817,"byte_end":63847,"line_start":195,"line_end":195,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63848,"byte_end":63851,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63852,"byte_end":63925,"line_start":197,"line_end":197,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63926,"byte_end":64000,"line_start":198,"line_end":198,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64001,"byte_end":64052,"line_start":199,"line_end":199,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64199,"byte_end":64214,"line_start":202,"line_end":202,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64104,"byte_end":64191,"line_start":201,"line_end":201,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64296,"byte_end":64315,"line_start":205,"line_end":205,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64228,"byte_end":64288,"line_start":204,"line_end":204,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64510,"byte_end":64527,"line_start":212,"line_end":212,"column_start":15,"column_end":32},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub unsafe fn unlock_upgradable(&Self)","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64337,"byte_end":64369,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64374,"byte_end":64377,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64382,"byte_end":64394,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64399,"byte_end":64402,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64407,"byte_end":64495,"line_start":211,"line_end":211,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64735,"byte_end":64742,"line_start":219,"line_end":219,"column_start":15,"column_end":22},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub unsafe fn upgrade(&Self)","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64541,"byte_end":64594,"line_start":214,"line_end":214,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64599,"byte_end":64602,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64607,"byte_end":64619,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64624,"byte_end":64627,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64632,"byte_end":64720,"line_start":218,"line_end":218,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64986,"byte_end":64997,"line_start":227,"line_end":227,"column_start":15,"column_end":26},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub unsafe fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64756,"byte_end":64827,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64832,"byte_end":64845,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64850,"byte_end":64853,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64858,"byte_end":64870,"line_start":224,"line_end":224,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64875,"byte_end":64878,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64883,"byte_end":64971,"line_start":226,"line_end":226,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":494},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65124,"byte_end":65144,"line_start":232,"line_end":232,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65017,"byte_end":65091,"line_start":230,"line_end":230,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65092,"byte_end":65106,"line_start":231,"line_end":231,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65387,"byte_end":65409,"line_start":238,"line_end":238,"column_start":15,"column_end":37},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub unsafe fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65185,"byte_end":65246,"line_start":233,"line_end":233,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65251,"byte_end":65254,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65259,"byte_end":65271,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65276,"byte_end":65279,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65284,"byte_end":65372,"line_start":237,"line_end":237,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65866,"byte_end":65881,"line_start":249,"line_end":249,"column_start":15,"column_end":30},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub unsafe fn bump_upgradable(&Self)","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65423,"byte_end":65501,"line_start":240,"line_end":240,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65506,"byte_end":65509,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65514,"byte_end":65601,"line_start":242,"line_end":242,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65606,"byte_end":65693,"line_start":243,"line_end":243,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65698,"byte_end":65725,"line_start":244,"line_end":244,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65730,"byte_end":65733,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65738,"byte_end":65750,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65755,"byte_end":65758,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65763,"byte_end":65851,"line_start":248,"line_end":248,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":497},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66080,"byte_end":66105,"line_start":257,"line_end":257,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65971,"byte_end":66045,"line_start":255,"line_end":255,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66046,"byte_end":66062,"line_start":256,"line_end":256,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66343,"byte_end":66363,"line_start":263,"line_end":263,"column_start":15,"column_end":35},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub unsafe fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66151,"byte_end":66202,"line_start":258,"line_end":258,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66207,"byte_end":66210,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66215,"byte_end":66227,"line_start":260,"line_end":260,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66232,"byte_end":66235,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66240,"byte_end":66328,"line_start":262,"line_end":262,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66572,"byte_end":66595,"line_start":270,"line_end":270,"column_start":15,"column_end":38},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub unsafe fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66377,"byte_end":66432,"line_start":265,"line_end":265,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66437,"byte_end":66440,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66445,"byte_end":66457,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66462,"byte_end":66465,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66470,"byte_end":66557,"line_start":269,"line_end":269,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66721,"byte_end":66742,"line_start":275,"line_end":275,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66607,"byte_end":66684,"line_start":273,"line_end":273,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66685,"byte_end":66703,"line_start":274,"line_end":274,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66862,"byte_end":66885,"line_start":277,"line_end":277,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66784,"byte_end":66854,"line_start":276,"line_end":276,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67010,"byte_end":67035,"line_start":280,"line_end":280,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66932,"byte_end":67002,"line_start":279,"line_end":279,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67321,"byte_end":67336,"line_start":288,"line_end":288,"column_start":15,"column_end":30},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub unsafe fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67081,"byte_end":67152,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67157,"byte_end":67180,"line_start":283,"line_end":283,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67185,"byte_end":67188,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67193,"byte_end":67205,"line_start":285,"line_end":285,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67210,"byte_end":67213,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67218,"byte_end":67306,"line_start":287,"line_end":287,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67623,"byte_end":67640,"line_start":296,"line_end":296,"column_start":15,"column_end":32},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub unsafe fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67383,"byte_end":67454,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67459,"byte_end":67482,"line_start":291,"line_end":291,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67487,"byte_end":67490,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67495,"byte_end":67507,"line_start":293,"line_end":293,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67512,"byte_end":67515,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67520,"byte_end":67608,"line_start":295,"line_end":295,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":68392,"byte_end":68398,"line_start":311,"line_end":311,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67684,"byte_end":67708,"line_start":299,"line_end":299,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67709,"byte_end":67712,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67713,"byte_end":67790,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67791,"byte_end":67870,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67871,"byte_end":67950,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":67951,"byte_end":68009,"line_start":304,"line_end":304,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":68010,"byte_end":68013,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":68014,"byte_end":68091,"line_start":306,"line_end":306,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":68092,"byte_end":68172,"line_start":307,"line_end":307,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":68173,"byte_end":68251,"line_start":308,"line_end":308,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":68252,"byte_end":68330,"line_start":309,"line_end":309,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":68331,"byte_end":68380,"line_start":310,"line_end":310,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69673,"byte_end":69676,"line_start":362,"line_end":362,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69547,"byte_end":69610,"line_start":359,"line_end":359,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69615,"byte_end":69647,"line_start":360,"line_end":360,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69652,"byte_end":69661,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69919,"byte_end":69929,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69807,"byte_end":69865,"line_start":369,"line_end":369,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69870,"byte_end":69879,"line_start":370,"line_end":370,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69884,"byte_end":69907,"line_start":371,"line_end":371,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70249,"byte_end":70258,"line_start":384,"line_end":384,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"pub const fn const_new(R, T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"/ Creates a new new instance of an `RwLock<T>` based on a pre-existing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70024,"byte_end":70096,"line_start":378,"line_end":378,"column_start":5,"column_end":77}},{"value":"/ `RawRwLock<T>`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70101,"byte_end":70120,"line_start":379,"line_end":379,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70125,"byte_end":70128,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70133,"byte_end":70203,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/ Rust.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70208,"byte_end":70217,"line_start":382,"line_end":382,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70222,"byte_end":70231,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71585,"byte_end":71589,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70977,"byte_end":71053,"line_start":415,"line_end":415,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71058,"byte_end":71087,"line_start":416,"line_end":416,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71092,"byte_end":71095,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71100,"byte_end":71176,"line_start":418,"line_end":418,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71181,"byte_end":71257,"line_start":419,"line_end":419,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71262,"byte_end":71286,"line_start":420,"line_end":420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71291,"byte_end":71294,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71299,"byte_end":71375,"line_start":422,"line_end":422,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71380,"byte_end":71446,"line_start":423,"line_end":423,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71451,"byte_end":71454,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71459,"byte_end":71531,"line_start":425,"line_end":425,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71536,"byte_end":71559,"line_start":426,"line_end":426,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71564,"byte_end":71573,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72092,"byte_end":72100,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71758,"byte_end":71820,"line_start":434,"line_end":434,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71825,"byte_end":71828,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71833,"byte_end":71910,"line_start":436,"line_end":436,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71915,"byte_end":71992,"line_start":437,"line_end":437,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":71997,"byte_end":72020,"line_start":438,"line_end":438,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72025,"byte_end":72028,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72033,"byte_end":72066,"line_start":440,"line_end":440,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72071,"byte_end":72080,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72719,"byte_end":72724,"line_start":460,"line_end":460,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72343,"byte_end":72416,"line_start":451,"line_end":451,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72421,"byte_end":72457,"line_start":452,"line_end":452,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72462,"byte_end":72465,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72470,"byte_end":72540,"line_start":454,"line_end":454,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72545,"byte_end":72583,"line_start":455,"line_end":455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72588,"byte_end":72591,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72596,"byte_end":72671,"line_start":457,"line_end":457,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72676,"byte_end":72693,"line_start":458,"line_end":458,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72698,"byte_end":72707,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73223,"byte_end":73232,"line_start":474,"line_end":474,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72898,"byte_end":72961,"line_start":466,"line_end":466,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72966,"byte_end":72969,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":72974,"byte_end":73050,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73055,"byte_end":73128,"line_start":469,"line_end":469,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73133,"byte_end":73151,"line_start":470,"line_end":470,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73156,"byte_end":73159,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73164,"byte_end":73197,"line_start":472,"line_end":472,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73202,"byte_end":73211,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73728,"byte_end":73735,"line_start":488,"line_end":488,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73480,"byte_end":73535,"line_start":483,"line_end":483,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73540,"byte_end":73543,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73548,"byte_end":73624,"line_start":485,"line_end":485,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73629,"byte_end":73702,"line_start":486,"line_end":486,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73707,"byte_end":73716,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73901,"byte_end":73910,"line_start":494,"line_end":494,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RwLock<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks whether this `RwLock` is currently locked in any way.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73811,"byte_end":73875,"line_start":492,"line_end":492,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73880,"byte_end":73889,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74499,"byte_end":74516,"line_start":510,"line_end":510,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":73968,"byte_end":74001,"line_start":498,"line_end":498,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74006,"byte_end":74009,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74014,"byte_end":74088,"line_start":500,"line_end":500,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74093,"byte_end":74168,"line_start":501,"line_end":501,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74173,"byte_end":74194,"line_start":502,"line_end":502,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74199,"byte_end":74202,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74207,"byte_end":74219,"line_start":504,"line_end":504,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74224,"byte_end":74227,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74232,"byte_end":74306,"line_start":506,"line_end":506,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74311,"byte_end":74385,"line_start":507,"line_end":507,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74390,"byte_end":74466,"line_start":508,"line_end":508,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74471,"byte_end":74480,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75107,"byte_end":75125,"line_start":526,"line_end":526,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74571,"byte_end":74605,"line_start":514,"line_end":514,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74610,"byte_end":74613,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74618,"byte_end":74692,"line_start":516,"line_end":516,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74697,"byte_end":74773,"line_start":517,"line_end":517,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74778,"byte_end":74799,"line_start":518,"line_end":518,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74804,"byte_end":74807,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74812,"byte_end":74824,"line_start":520,"line_end":520,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74829,"byte_end":74832,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74837,"byte_end":74911,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74916,"byte_end":74991,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":74996,"byte_end":75074,"line_start":524,"line_end":524,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75079,"byte_end":75088,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75591,"byte_end":75594,"line_start":540,"line_end":540,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75183,"byte_end":75240,"line_start":530,"line_end":530,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75245,"byte_end":75248,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75253,"byte_end":75329,"line_start":532,"line_end":532,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75334,"byte_end":75388,"line_start":533,"line_end":533,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75393,"byte_end":75416,"line_start":534,"line_end":534,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75421,"byte_end":75424,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75429,"byte_end":75441,"line_start":536,"line_end":536,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75446,"byte_end":75449,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75454,"byte_end":75521,"line_start":538,"line_end":538,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75526,"byte_end":75572,"line_start":539,"line_end":539,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76226,"byte_end":76234,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<RwLock<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75639,"byte_end":75688,"line_start":544,"line_end":544,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75693,"byte_end":75696,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75701,"byte_end":75775,"line_start":546,"line_end":546,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75780,"byte_end":75853,"line_start":547,"line_end":547,"column_start":5,"column_end":78}},{"value":"/ alive, for example when dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75858,"byte_end":75903,"line_start":548,"line_end":548,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75908,"byte_end":75911,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75916,"byte_end":75928,"line_start":550,"line_end":550,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75933,"byte_end":75936,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":75941,"byte_end":76012,"line_start":552,"line_end":552,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76017,"byte_end":76089,"line_start":553,"line_end":553,"column_start":5,"column_end":77}},{"value":"/ `RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76094,"byte_end":76171,"line_start":554,"line_end":554,"column_start":5,"column_end":82}},{"value":"/ using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76176,"byte_end":76200,"line_start":555,"line_end":555,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76205,"byte_end":76214,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76900,"byte_end":76922,"line_start":575,"line_end":575,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76340,"byte_end":76402,"line_start":563,"line_end":563,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76407,"byte_end":76410,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76415,"byte_end":76489,"line_start":565,"line_end":565,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76494,"byte_end":76569,"line_start":566,"line_end":566,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76574,"byte_end":76595,"line_start":567,"line_end":567,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76600,"byte_end":76603,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76608,"byte_end":76620,"line_start":569,"line_end":569,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76625,"byte_end":76628,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76633,"byte_end":76707,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76712,"byte_end":76786,"line_start":572,"line_end":572,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76791,"byte_end":76867,"line_start":573,"line_end":573,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76872,"byte_end":76881,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77547,"byte_end":77570,"line_start":591,"line_end":591,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76982,"byte_end":77045,"line_start":579,"line_end":579,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77050,"byte_end":77053,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77058,"byte_end":77132,"line_start":581,"line_end":581,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77137,"byte_end":77213,"line_start":582,"line_end":582,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77218,"byte_end":77239,"line_start":583,"line_end":583,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77244,"byte_end":77247,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77252,"byte_end":77264,"line_start":585,"line_end":585,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77269,"byte_end":77272,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77277,"byte_end":77351,"line_start":587,"line_end":587,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77356,"byte_end":77431,"line_start":588,"line_end":588,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77436,"byte_end":77514,"line_start":589,"line_end":589,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77519,"byte_end":77528,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78022,"byte_end":78034,"line_start":604,"line_end":604,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77685,"byte_end":77762,"line_start":597,"line_end":597,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77767,"byte_end":77782,"line_start":598,"line_end":598,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77787,"byte_end":77790,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77795,"byte_end":77866,"line_start":600,"line_end":600,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77871,"byte_end":77942,"line_start":601,"line_end":601,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77947,"byte_end":77996,"line_start":602,"line_end":602,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78001,"byte_end":78010,"line_start":603,"line_end":603,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78647,"byte_end":78661,"line_start":620,"line_end":620,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78310,"byte_end":78387,"line_start":613,"line_end":613,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78392,"byte_end":78407,"line_start":614,"line_end":614,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78412,"byte_end":78415,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78420,"byte_end":78491,"line_start":616,"line_end":616,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78496,"byte_end":78567,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78572,"byte_end":78621,"line_start":618,"line_end":618,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78626,"byte_end":78635,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79282,"byte_end":79295,"line_start":636,"line_end":636,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":78938,"byte_end":79011,"line_start":629,"line_end":629,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79016,"byte_end":79039,"line_start":630,"line_end":630,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79044,"byte_end":79047,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79052,"byte_end":79123,"line_start":632,"line_end":632,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79128,"byte_end":79199,"line_start":633,"line_end":633,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79204,"byte_end":79256,"line_start":634,"line_end":634,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79261,"byte_end":79270,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79920,"byte_end":79935,"line_start":652,"line_end":652,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79576,"byte_end":79649,"line_start":645,"line_end":645,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79654,"byte_end":79677,"line_start":646,"line_end":646,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79682,"byte_end":79685,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79690,"byte_end":79761,"line_start":648,"line_end":648,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79766,"byte_end":79837,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79842,"byte_end":79894,"line_start":650,"line_end":650,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":79899,"byte_end":79908,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81066,"byte_end":81080,"line_start":679,"line_end":679,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80273,"byte_end":80349,"line_start":663,"line_end":663,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80354,"byte_end":80383,"line_start":664,"line_end":664,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80388,"byte_end":80391,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80396,"byte_end":80472,"line_start":666,"line_end":666,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80477,"byte_end":80553,"line_start":667,"line_end":667,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80558,"byte_end":80582,"line_start":668,"line_end":668,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80587,"byte_end":80590,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80595,"byte_end":80670,"line_start":670,"line_end":670,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80675,"byte_end":80750,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80755,"byte_end":80826,"line_start":672,"line_end":672,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80831,"byte_end":80905,"line_start":673,"line_end":673,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80910,"byte_end":80927,"line_start":674,"line_end":674,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80932,"byte_end":80935,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80940,"byte_end":81012,"line_start":676,"line_end":676,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81017,"byte_end":81040,"line_start":677,"line_end":677,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81045,"byte_end":81054,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81764,"byte_end":81782,"line_start":696,"line_end":696,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81259,"byte_end":81321,"line_start":685,"line_end":685,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81326,"byte_end":81329,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81334,"byte_end":81411,"line_start":687,"line_end":687,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81416,"byte_end":81493,"line_start":688,"line_end":688,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81498,"byte_end":81521,"line_start":689,"line_end":689,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81526,"byte_end":81529,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81534,"byte_end":81610,"line_start":691,"line_end":691,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81615,"byte_end":81692,"line_start":692,"line_end":692,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81697,"byte_end":81700,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81705,"byte_end":81738,"line_start":694,"line_end":694,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":81743,"byte_end":81752,"line_start":695,"line_end":695,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82629,"byte_end":82651,"line_start":718,"line_end":718,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82096,"byte_end":82173,"line_start":707,"line_end":707,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82178,"byte_end":82193,"line_start":708,"line_end":708,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82198,"byte_end":82201,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82206,"byte_end":82277,"line_start":710,"line_end":710,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82282,"byte_end":82353,"line_start":711,"line_end":711,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82358,"byte_end":82407,"line_start":712,"line_end":712,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82412,"byte_end":82415,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82420,"byte_end":82493,"line_start":714,"line_end":714,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82498,"byte_end":82565,"line_start":715,"line_end":715,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82570,"byte_end":82603,"line_start":716,"line_end":716,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82608,"byte_end":82617,"line_start":717,"line_end":717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83297,"byte_end":83321,"line_start":737,"line_end":737,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82960,"byte_end":83037,"line_start":730,"line_end":730,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83042,"byte_end":83057,"line_start":731,"line_end":731,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83062,"byte_end":83065,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83070,"byte_end":83141,"line_start":733,"line_end":733,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83146,"byte_end":83217,"line_start":734,"line_end":734,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83222,"byte_end":83271,"line_start":735,"line_end":735,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83276,"byte_end":83285,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84449,"byte_end":84464,"line_start":772,"line_end":772,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83971,"byte_end":84051,"line_start":762,"line_end":762,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84056,"byte_end":84085,"line_start":763,"line_end":763,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84090,"byte_end":84093,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84098,"byte_end":84177,"line_start":765,"line_end":765,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84182,"byte_end":84260,"line_start":766,"line_end":766,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84265,"byte_end":84310,"line_start":767,"line_end":767,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84315,"byte_end":84318,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84323,"byte_end":84395,"line_start":769,"line_end":769,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84400,"byte_end":84423,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84428,"byte_end":84437,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84991,"byte_end":85010,"line_start":786,"line_end":786,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84653,"byte_end":84719,"line_start":778,"line_end":778,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84724,"byte_end":84727,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84732,"byte_end":84809,"line_start":780,"line_end":780,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84814,"byte_end":84891,"line_start":781,"line_end":781,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84896,"byte_end":84919,"line_start":782,"line_end":782,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84924,"byte_end":84927,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84932,"byte_end":84965,"line_start":784,"line_end":784,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":84970,"byte_end":84979,"line_start":785,"line_end":785,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85673,"byte_end":85696,"line_start":804,"line_end":804,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85332,"byte_end":85413,"line_start":797,"line_end":797,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85418,"byte_end":85433,"line_start":798,"line_end":798,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85438,"byte_end":85441,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85446,"byte_end":85517,"line_start":800,"line_end":800,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85522,"byte_end":85593,"line_start":801,"line_end":801,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85598,"byte_end":85647,"line_start":802,"line_end":802,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85652,"byte_end":85661,"line_start":803,"line_end":803,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86356,"byte_end":86381,"line_start":823,"line_end":823,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86015,"byte_end":86096,"line_start":816,"line_end":816,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86101,"byte_end":86116,"line_start":817,"line_end":817,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86121,"byte_end":86124,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86129,"byte_end":86200,"line_start":819,"line_end":819,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86205,"byte_end":86276,"line_start":820,"line_end":820,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86281,"byte_end":86330,"line_start":821,"line_end":821,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86335,"byte_end":86344,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":589},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87854,"byte_end":87869,"line_start":873,"line_end":873,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87696,"byte_end":87768,"line_start":870,"line_end":870,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87769,"byte_end":87781,"line_start":871,"line_end":871,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87782,"byte_end":87842,"line_start":872,"line_end":872,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88235,"byte_end":88241,"line_start":882,"line_end":882,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88157,"byte_end":88223,"line_start":881,"line_end":881,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88721,"byte_end":88724,"line_start":895,"line_end":895,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88302,"byte_end":88376,"line_start":886,"line_end":886,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88381,"byte_end":88384,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88389,"byte_end":88451,"line_start":888,"line_end":888,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88456,"byte_end":88487,"line_start":889,"line_end":889,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88492,"byte_end":88495,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88500,"byte_end":88551,"line_start":891,"line_end":891,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88556,"byte_end":88637,"line_start":892,"line_end":892,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88642,"byte_end":88695,"line_start":893,"line_end":893,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88700,"byte_end":88709,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89568,"byte_end":89575,"line_start":919,"line_end":919,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89068,"byte_end":89142,"line_start":909,"line_end":909,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89147,"byte_end":89223,"line_start":910,"line_end":910,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89228,"byte_end":89231,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89236,"byte_end":89298,"line_start":912,"line_end":912,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89303,"byte_end":89334,"line_start":913,"line_end":913,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89339,"byte_end":89342,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89347,"byte_end":89398,"line_start":915,"line_end":915,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89403,"byte_end":89484,"line_start":916,"line_end":916,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89489,"byte_end":89542,"line_start":917,"line_end":917,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":89547,"byte_end":89556,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90327,"byte_end":90335,"line_start":943,"line_end":943,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90030,"byte_end":90097,"line_start":936,"line_end":936,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90102,"byte_end":90105,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90110,"byte_end":90162,"line_start":938,"line_end":938,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90167,"byte_end":90170,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90175,"byte_end":90243,"line_start":940,"line_end":940,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90248,"byte_end":90301,"line_start":941,"line_end":941,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90306,"byte_end":90315,"line_start":942,"line_end":942,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91490,"byte_end":91501,"line_start":970,"line_end":970,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90689,"byte_end":90743,"line_start":957,"line_end":957,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90748,"byte_end":90751,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90756,"byte_end":90830,"line_start":959,"line_end":959,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90835,"byte_end":90910,"line_start":960,"line_end":960,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90915,"byte_end":90988,"line_start":961,"line_end":961,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90993,"byte_end":91062,"line_start":962,"line_end":962,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91067,"byte_end":91144,"line_start":963,"line_end":963,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91149,"byte_end":91216,"line_start":964,"line_end":964,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91221,"byte_end":91224,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91229,"byte_end":91305,"line_start":966,"line_end":966,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91310,"byte_end":91386,"line_start":967,"line_end":967,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91391,"byte_end":91464,"line_start":968,"line_end":968,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91469,"byte_end":91478,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91985,"byte_end":91998,"line_start":985,"line_end":985,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91688,"byte_end":91755,"line_start":978,"line_end":978,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91760,"byte_end":91763,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91768,"byte_end":91820,"line_start":980,"line_end":980,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91825,"byte_end":91828,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91833,"byte_end":91901,"line_start":982,"line_end":982,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91906,"byte_end":91959,"line_start":983,"line_end":983,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":91964,"byte_end":91973,"line_start":984,"line_end":984,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92579,"byte_end":92583,"line_start":1003,"line_end":1003,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92279,"byte_end":92351,"line_start":997,"line_end":997,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92356,"byte_end":92359,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92364,"byte_end":92440,"line_start":999,"line_end":999,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92445,"byte_end":92521,"line_start":1000,"line_end":1000,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92526,"byte_end":92553,"line_start":1001,"line_end":1001,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92558,"byte_end":92567,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":643},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93911,"byte_end":93927,"line_start":1049,"line_end":1049,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93749,"byte_end":93825,"line_start":1046,"line_end":1046,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93826,"byte_end":93838,"line_start":1047,"line_end":1047,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93839,"byte_end":93899,"line_start":1048,"line_end":1048,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94299,"byte_end":94305,"line_start":1058,"line_end":1058,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94221,"byte_end":94287,"line_start":1057,"line_end":1057,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94788,"byte_end":94791,"line_start":1071,"line_end":1071,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94366,"byte_end":94441,"line_start":1062,"line_end":1062,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94446,"byte_end":94449,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94454,"byte_end":94517,"line_start":1064,"line_end":1064,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94522,"byte_end":94553,"line_start":1065,"line_end":1065,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94558,"byte_end":94561,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94566,"byte_end":94617,"line_start":1067,"line_end":1067,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94622,"byte_end":94704,"line_start":1068,"line_end":1068,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94709,"byte_end":94762,"line_start":1069,"line_end":1069,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94767,"byte_end":94776,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95652,"byte_end":95659,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95149,"byte_end":95224,"line_start":1085,"line_end":1085,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95229,"byte_end":95305,"line_start":1086,"line_end":1086,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95310,"byte_end":95313,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95318,"byte_end":95381,"line_start":1088,"line_end":1088,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95386,"byte_end":95417,"line_start":1089,"line_end":1089,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95422,"byte_end":95425,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95430,"byte_end":95481,"line_start":1091,"line_end":1091,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95486,"byte_end":95568,"line_start":1092,"line_end":1092,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95573,"byte_end":95626,"line_start":1093,"line_end":1093,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":95631,"byte_end":95640,"line_start":1094,"line_end":1094,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96360,"byte_end":96368,"line_start":1117,"line_end":1117,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96128,"byte_end":96195,"line_start":1112,"line_end":1112,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96200,"byte_end":96203,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96208,"byte_end":96276,"line_start":1114,"line_end":1114,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96281,"byte_end":96334,"line_start":1115,"line_end":1115,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96339,"byte_end":96348,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97076,"byte_end":97085,"line_start":1137,"line_end":1137,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96734,"byte_end":96810,"line_start":1131,"line_end":1131,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96815,"byte_end":96880,"line_start":1132,"line_end":1132,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96885,"byte_end":96888,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96893,"byte_end":96966,"line_start":1134,"line_end":1134,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96971,"byte_end":97044,"line_start":1135,"line_end":1135,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97049,"byte_end":97064,"line_start":1136,"line_end":1136,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97862,"byte_end":97885,"line_start":1158,"line_end":1158,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97508,"byte_end":97596,"line_start":1152,"line_end":1152,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97601,"byte_end":97666,"line_start":1153,"line_end":1153,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97671,"byte_end":97674,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97679,"byte_end":97752,"line_start":1155,"line_end":1155,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97757,"byte_end":97830,"line_start":1156,"line_end":1156,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97835,"byte_end":97850,"line_start":1157,"line_end":1157,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99132,"byte_end":99143,"line_start":1186,"line_end":1186,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98330,"byte_end":98384,"line_start":1173,"line_end":1173,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98389,"byte_end":98392,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98397,"byte_end":98471,"line_start":1175,"line_end":1175,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98476,"byte_end":98551,"line_start":1176,"line_end":1176,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98556,"byte_end":98629,"line_start":1177,"line_end":1177,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98634,"byte_end":98703,"line_start":1178,"line_end":1178,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98708,"byte_end":98785,"line_start":1179,"line_end":1179,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98790,"byte_end":98857,"line_start":1180,"line_end":1180,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98862,"byte_end":98865,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98870,"byte_end":98946,"line_start":1182,"line_end":1182,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98951,"byte_end":99027,"line_start":1183,"line_end":1183,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99032,"byte_end":99106,"line_start":1184,"line_end":1184,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99111,"byte_end":99120,"line_start":1185,"line_end":1185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99635,"byte_end":99648,"line_start":1201,"line_end":1201,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99338,"byte_end":99405,"line_start":1194,"line_end":1194,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99410,"byte_end":99413,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99418,"byte_end":99470,"line_start":1196,"line_end":1196,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99475,"byte_end":99478,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99483,"byte_end":99551,"line_start":1198,"line_end":1198,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99556,"byte_end":99609,"line_start":1199,"line_end":1199,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99614,"byte_end":99623,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100241,"byte_end":100245,"line_start":1219,"line_end":1219,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":99940,"byte_end":100012,"line_start":1213,"line_end":1213,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100017,"byte_end":100020,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100025,"byte_end":100101,"line_start":1215,"line_end":1215,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100106,"byte_end":100183,"line_start":1216,"line_end":1216,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100188,"byte_end":100215,"line_start":1217,"line_end":1217,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100220,"byte_end":100229,"line_start":1218,"line_end":1218,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":712},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101791,"byte_end":101816,"line_start":1272,"line_end":1272,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101629,"byte_end":101705,"line_start":1269,"line_end":1269,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101706,"byte_end":101718,"line_start":1270,"line_end":1270,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101719,"byte_end":101779,"line_start":1271,"line_end":1271,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102228,"byte_end":102234,"line_start":1284,"line_end":1284,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102150,"byte_end":102216,"line_start":1283,"line_end":1283,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102527,"byte_end":102535,"line_start":1293,"line_end":1293,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102295,"byte_end":102362,"line_start":1288,"line_end":1288,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102367,"byte_end":102370,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102375,"byte_end":102443,"line_start":1290,"line_end":1290,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102448,"byte_end":102501,"line_start":1291,"line_end":1291,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102506,"byte_end":102515,"line_start":1292,"line_end":1292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102989,"byte_end":102996,"line_start":1307,"line_end":1307,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102834,"byte_end":102915,"line_start":1305,"line_end":1305,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102920,"byte_end":102977,"line_start":1306,"line_end":1306,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":103535,"byte_end":103546,"line_start":1323,"line_end":1323,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":103338,"byte_end":103422,"line_start":1320,"line_end":1320,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":103427,"byte_end":103430,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":103435,"byte_end":103523,"line_start":1322,"line_end":1322,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104870,"byte_end":104881,"line_start":1352,"line_end":1352,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104059,"byte_end":104113,"line_start":1339,"line_end":1339,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104118,"byte_end":104121,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104126,"byte_end":104200,"line_start":1341,"line_end":1341,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104205,"byte_end":104280,"line_start":1342,"line_end":1342,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104285,"byte_end":104358,"line_start":1343,"line_end":1343,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104363,"byte_end":104432,"line_start":1344,"line_end":1344,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104437,"byte_end":104514,"line_start":1345,"line_end":1345,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104519,"byte_end":104586,"line_start":1346,"line_end":1346,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104591,"byte_end":104594,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104599,"byte_end":104675,"line_start":1348,"line_end":1348,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104680,"byte_end":104756,"line_start":1349,"line_end":1349,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104761,"byte_end":104844,"line_start":1350,"line_end":1350,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104849,"byte_end":104858,"line_start":1351,"line_end":1351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105384,"byte_end":105397,"line_start":1367,"line_end":1367,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105087,"byte_end":105154,"line_start":1360,"line_end":1360,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105159,"byte_end":105162,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105167,"byte_end":105219,"line_start":1362,"line_end":1362,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105224,"byte_end":105227,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105232,"byte_end":105300,"line_start":1364,"line_end":1364,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105305,"byte_end":105358,"line_start":1365,"line_end":1365,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105363,"byte_end":105372,"line_start":1366,"line_end":1366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106012,"byte_end":106016,"line_start":1385,"line_end":1385,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105701,"byte_end":105773,"line_start":1379,"line_end":1379,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105778,"byte_end":105781,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105786,"byte_end":105862,"line_start":1381,"line_end":1381,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105867,"byte_end":105954,"line_start":1382,"line_end":1382,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105959,"byte_end":105986,"line_start":1383,"line_end":1383,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":105991,"byte_end":106000,"line_start":1384,"line_end":1384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106669,"byte_end":106678,"line_start":1401,"line_end":1401,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106296,"byte_end":106374,"line_start":1394,"line_end":1394,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106379,"byte_end":106455,"line_start":1395,"line_end":1395,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106460,"byte_end":106473,"line_start":1396,"line_end":1396,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106478,"byte_end":106481,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106486,"byte_end":106559,"line_start":1398,"line_end":1398,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106564,"byte_end":106637,"line_start":1399,"line_end":1399,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106642,"byte_end":106657,"line_start":1400,"line_end":1400,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107382,"byte_end":107397,"line_start":1421,"line_end":1421,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107127,"byte_end":107199,"line_start":1416,"line_end":1416,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107204,"byte_end":107247,"line_start":1417,"line_end":1417,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107252,"byte_end":107255,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107260,"byte_end":107331,"line_start":1419,"line_end":1419,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107336,"byte_end":107370,"line_start":1420,"line_end":1420,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108140,"byte_end":108157,"line_start":1444,"line_end":1444,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107871,"byte_end":107943,"line_start":1438,"line_end":1438,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107948,"byte_end":107991,"line_start":1439,"line_end":1439,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107996,"byte_end":107999,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108004,"byte_end":108075,"line_start":1441,"line_end":1441,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108080,"byte_end":108114,"line_start":1442,"line_end":1442,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108119,"byte_end":108128,"line_start":1443,"line_end":1443,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":773},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110206,"byte_end":110227,"line_start":1510,"line_end":1510,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109750,"byte_end":109834,"line_start":1502,"line_end":1502,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109835,"byte_end":109870,"line_start":1503,"line_end":1503,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109871,"byte_end":109874,"line_start":1504,"line_end":1504,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109875,"byte_end":109964,"line_start":1505,"line_end":1505,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109965,"byte_end":110040,"line_start":1506,"line_end":1506,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110041,"byte_end":110121,"line_start":1507,"line_end":1507,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110122,"byte_end":110133,"line_start":1508,"line_end":1508,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110134,"byte_end":110194,"line_start":1509,"line_end":1509,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111073,"byte_end":111076,"line_start":1532,"line_end":1532,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110642,"byte_end":110716,"line_start":1523,"line_end":1523,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110721,"byte_end":110724,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110729,"byte_end":110797,"line_start":1525,"line_end":1525,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110802,"byte_end":110833,"line_start":1526,"line_end":1526,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110838,"byte_end":110841,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110846,"byte_end":110897,"line_start":1528,"line_end":1528,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110902,"byte_end":110989,"line_start":1529,"line_end":1529,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110994,"byte_end":111047,"line_start":1530,"line_end":1530,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111052,"byte_end":111061,"line_start":1531,"line_end":1531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111911,"byte_end":111918,"line_start":1556,"line_end":1556,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111399,"byte_end":111473,"line_start":1546,"line_end":1546,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111478,"byte_end":111554,"line_start":1547,"line_end":1547,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111559,"byte_end":111562,"line_start":1548,"line_end":1548,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111567,"byte_end":111635,"line_start":1549,"line_end":1549,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111640,"byte_end":111671,"line_start":1550,"line_end":1550,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111676,"byte_end":111679,"line_start":1551,"line_end":1551,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111684,"byte_end":111735,"line_start":1552,"line_end":1552,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111740,"byte_end":111827,"line_start":1553,"line_end":1553,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111832,"byte_end":111885,"line_start":1554,"line_end":1554,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":111890,"byte_end":111899,"line_start":1555,"line_end":1555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113243,"byte_end":113254,"line_start":1588,"line_end":1588,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112436,"byte_end":112490,"line_start":1575,"line_end":1575,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112495,"byte_end":112498,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112503,"byte_end":112577,"line_start":1577,"line_end":1577,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112582,"byte_end":112657,"line_start":1578,"line_end":1578,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112662,"byte_end":112735,"line_start":1579,"line_end":1579,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112740,"byte_end":112809,"line_start":1580,"line_end":1580,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112814,"byte_end":112891,"line_start":1581,"line_end":1581,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112896,"byte_end":112963,"line_start":1582,"line_end":1582,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112968,"byte_end":112971,"line_start":1583,"line_end":1583,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112976,"byte_end":113052,"line_start":1584,"line_end":1584,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113057,"byte_end":113133,"line_start":1585,"line_end":1585,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113138,"byte_end":113217,"line_start":1586,"line_end":1586,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113222,"byte_end":113231,"line_start":1587,"line_end":1587,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":824},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114928,"byte_end":114950,"line_start":1645,"line_end":1645,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114468,"byte_end":114554,"line_start":1637,"line_end":1637,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114555,"byte_end":114590,"line_start":1638,"line_end":1638,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114591,"byte_end":114594,"line_start":1639,"line_end":1639,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114595,"byte_end":114686,"line_start":1640,"line_end":1640,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114687,"byte_end":114762,"line_start":1641,"line_end":1641,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114763,"byte_end":114843,"line_start":1642,"line_end":1642,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114844,"byte_end":114855,"line_start":1643,"line_end":1643,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114856,"byte_end":114916,"line_start":1644,"line_end":1644,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115809,"byte_end":115812,"line_start":1670,"line_end":1670,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115375,"byte_end":115450,"line_start":1661,"line_end":1661,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115455,"byte_end":115458,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115463,"byte_end":115532,"line_start":1663,"line_end":1663,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115537,"byte_end":115568,"line_start":1664,"line_end":1664,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115573,"byte_end":115576,"line_start":1665,"line_end":1665,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115581,"byte_end":115632,"line_start":1666,"line_end":1666,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115637,"byte_end":115725,"line_start":1667,"line_end":1667,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115730,"byte_end":115783,"line_start":1668,"line_end":1668,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115788,"byte_end":115797,"line_start":1669,"line_end":1669,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116664,"byte_end":116671,"line_start":1694,"line_end":1694,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116149,"byte_end":116224,"line_start":1684,"line_end":1684,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116229,"byte_end":116305,"line_start":1685,"line_end":1685,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116310,"byte_end":116313,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116318,"byte_end":116387,"line_start":1687,"line_end":1687,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116392,"byte_end":116423,"line_start":1688,"line_end":1688,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116428,"byte_end":116431,"line_start":1689,"line_end":1689,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116436,"byte_end":116487,"line_start":1690,"line_end":1690,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116492,"byte_end":116580,"line_start":1691,"line_end":1691,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116585,"byte_end":116638,"line_start":1692,"line_end":1692,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":116643,"byte_end":116652,"line_start":1693,"line_end":1693,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118012,"byte_end":118023,"line_start":1726,"line_end":1726,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117204,"byte_end":117258,"line_start":1713,"line_end":1713,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117263,"byte_end":117266,"line_start":1714,"line_end":1714,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117271,"byte_end":117345,"line_start":1715,"line_end":1715,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117350,"byte_end":117425,"line_start":1716,"line_end":1716,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117430,"byte_end":117503,"line_start":1717,"line_end":1717,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117508,"byte_end":117577,"line_start":1718,"line_end":1718,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117582,"byte_end":117659,"line_start":1719,"line_end":1719,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117664,"byte_end":117731,"line_start":1720,"line_end":1720,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117736,"byte_end":117739,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117744,"byte_end":117820,"line_start":1722,"line_end":1722,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117825,"byte_end":117901,"line_start":1723,"line_end":1723,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117906,"byte_end":117986,"line_start":1724,"line_end":1724,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117991,"byte_end":118000,"line_start":1725,"line_end":1725,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9230,"byte_end":9235,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9304,"byte_end":9309,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9341,"byte_end":9346,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10024,"byte_end":10029,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10396,"byte_end":10401,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13984,"byte_end":13989,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14641,"byte_end":14646,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15847,"byte_end":15852,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15990,"byte_end":15995,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":16141,"byte_end":16146,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":16435,"byte_end":16452,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17945,"byte_end":17955,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18013,"byte_end":18023,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20405,"byte_end":20415,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22447,"byte_end":22457,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22641,"byte_end":22651,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22826,"byte_end":22836,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23087,"byte_end":23097,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23293,"byte_end":23303,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24169,"byte_end":24185,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24259,"byte_end":24275,"line_start":604,"line_end":604,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24365,"byte_end":24381,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26135,"byte_end":26151,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27173,"byte_end":27189,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27361,"byte_end":27377,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27540,"byte_end":27556,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27807,"byte_end":27823,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":28023,"byte_end":28039,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30595,"byte_end":30612,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30686,"byte_end":30703,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30748,"byte_end":30765,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32896,"byte_end":32913,"line_start":140,"line_end":140,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34219,"byte_end":34236,"line_start":178,"line_end":178,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35335,"byte_end":35349,"line_start":209,"line_end":209,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35449,"byte_end":35463,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35515,"byte_end":35529,"line_start":217,"line_end":217,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36643,"byte_end":36657,"line_start":255,"line_end":255,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37327,"byte_end":37341,"line_start":275,"line_end":275,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41160,"byte_end":41174,"line_start":384,"line_end":384,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41863,"byte_end":41877,"line_start":402,"line_end":402,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43121,"byte_end":43135,"line_start":434,"line_end":434,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43313,"byte_end":43327,"line_start":441,"line_end":441,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43513,"byte_end":43527,"line_start":448,"line_end":448,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43879,"byte_end":43896,"line_start":457,"line_end":457,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45544,"byte_end":45563,"line_start":514,"line_end":514,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45646,"byte_end":45665,"line_start":518,"line_end":518,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48223,"byte_end":48242,"line_start":596,"line_end":596,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50337,"byte_end":50356,"line_start":653,"line_end":653,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50566,"byte_end":50585,"line_start":663,"line_end":663,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50875,"byte_end":50894,"line_start":675,"line_end":675,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51118,"byte_end":51137,"line_start":683,"line_end":683,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52153,"byte_end":52178,"line_start":711,"line_end":711,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52265,"byte_end":52290,"line_start":716,"line_end":716,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54162,"byte_end":54187,"line_start":773,"line_end":773,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":55260,"byte_end":55285,"line_start":798,"line_end":798,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":55481,"byte_end":55506,"line_start":808,"line_end":808,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":55794,"byte_end":55819,"line_start":820,"line_end":820,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":56043,"byte_end":56068,"line_start":828,"line_end":828,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69145,"byte_end":69151,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69228,"byte_end":69234,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69267,"byte_end":69273,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70005,"byte_end":70011,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70435,"byte_end":70441,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76321,"byte_end":76327,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77666,"byte_end":77672,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80254,"byte_end":80260,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82077,"byte_end":82083,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83666,"byte_end":83672,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85313,"byte_end":85319,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86751,"byte_end":86757,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86898,"byte_end":86904,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87053,"byte_end":87059,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87349,"byte_end":87366,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88051,"byte_end":88066,"line_start":878,"line_end":878,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88125,"byte_end":88140,"line_start":880,"line_end":880,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90657,"byte_end":90672,"line_start":956,"line_end":956,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92796,"byte_end":92811,"line_start":1011,"line_end":1011,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92993,"byte_end":93008,"line_start":1019,"line_end":1019,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93279,"byte_end":93294,"line_start":1029,"line_end":1029,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93495,"byte_end":93510,"line_start":1036,"line_end":1036,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94113,"byte_end":94129,"line_start":1054,"line_end":1054,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94188,"byte_end":94204,"line_start":1056,"line_end":1056,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96701,"byte_end":96717,"line_start":1130,"line_end":1130,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97475,"byte_end":97491,"line_start":1151,"line_end":1151,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98297,"byte_end":98313,"line_start":1172,"line_end":1172,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100466,"byte_end":100482,"line_start":1227,"line_end":1227,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100668,"byte_end":100684,"line_start":1235,"line_end":1235,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100861,"byte_end":100877,"line_start":1242,"line_end":1242,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101156,"byte_end":101172,"line_start":1252,"line_end":1252,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101373,"byte_end":101389,"line_start":1259,"line_end":1259,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102016,"byte_end":102041,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102108,"byte_end":102133,"line_start":1282,"line_end":1282,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104017,"byte_end":104042,"line_start":1338,"line_end":1338,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106254,"byte_end":106279,"line_start":1393,"line_end":1393,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107085,"byte_end":107110,"line_start":1415,"line_end":1415,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108691,"byte_end":108716,"line_start":1462,"line_end":1462,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108905,"byte_end":108930,"line_start":1470,"line_end":1470,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109231,"byte_end":109256,"line_start":1481,"line_end":1481,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109464,"byte_end":109489,"line_start":1489,"line_end":1489,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110397,"byte_end":110418,"line_start":1516,"line_end":1516,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110492,"byte_end":110513,"line_start":1517,"line_end":1517,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110604,"byte_end":110625,"line_start":1522,"line_end":1522,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112398,"byte_end":112419,"line_start":1574,"line_end":1574,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113491,"byte_end":113512,"line_start":1597,"line_end":1597,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113681,"byte_end":113702,"line_start":1605,"line_end":1605,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113975,"byte_end":113996,"line_start":1616,"line_end":1616,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114197,"byte_end":114218,"line_start":1624,"line_end":1624,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115126,"byte_end":115148,"line_start":1652,"line_end":1652,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115223,"byte_end":115245,"line_start":1655,"line_end":1655,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115336,"byte_end":115358,"line_start":1660,"line_end":1660,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117165,"byte_end":117187,"line_start":1712,"line_end":1712,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118268,"byte_end":118290,"line_start":1735,"line_end":1735,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118463,"byte_end":118485,"line_start":1743,"line_end":1743,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118649,"byte_end":118671,"line_start":1750,"line_end":1750,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118952,"byte_end":118974,"line_start":1761,"line_end":1761,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":119175,"byte_end":119197,"line_start":1769,"line_end":1769,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":7033,"byte_end":7041,"line_start":80,"line_end":80,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":26}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":8195,"byte_end":8203,"line_start":113,"line_end":113,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9230,"byte_end":9235,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":1927}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9304,"byte_end":9309,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":9341,"byte_end":9346,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10024,"byte_end":10029,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":10396,"byte_end":10401,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":13984,"byte_end":13989,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":14641,"byte_end":14646,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15847,"byte_end":15852,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":15990,"byte_end":15995,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":16141,"byte_end":16146,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":16435,"byte_end":16452,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":86},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":17945,"byte_end":17955,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":18013,"byte_end":18023,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":20405,"byte_end":20415,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22447,"byte_end":22457,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22641,"byte_end":22651,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2111}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":22826,"byte_end":22836,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23087,"byte_end":23097,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":23293,"byte_end":23303,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24169,"byte_end":24185,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24259,"byte_end":24275,"line_start":604,"line_end":604,"column_start":60,"column_end":76},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":1927}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":24365,"byte_end":24381,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":26135,"byte_end":26151,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27173,"byte_end":27189,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27361,"byte_end":27377,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":2111}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27540,"byte_end":27556,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":27807,"byte_end":27823,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/mutex.rs","byte_start":28023,"byte_end":28039,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30595,"byte_end":30612,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":1927}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30686,"byte_end":30703,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":30748,"byte_end":30765,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":32896,"byte_end":32913,"line_start":140,"line_end":140,"column_start":39,"column_end":56},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":34219,"byte_end":34236,"line_start":178,"line_end":178,"column_start":40,"column_end":57},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35335,"byte_end":35349,"line_start":209,"line_end":209,"column_start":9,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":1927}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35449,"byte_end":35463,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":35515,"byte_end":35529,"line_start":217,"line_end":217,"column_start":38,"column_end":52},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":36643,"byte_end":36657,"line_start":255,"line_end":255,"column_start":15,"column_end":29},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":37327,"byte_end":37341,"line_start":275,"line_end":275,"column_start":46,"column_end":60},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41160,"byte_end":41174,"line_start":384,"line_end":384,"column_start":50,"column_end":64},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":41863,"byte_end":41877,"line_start":402,"line_end":402,"column_start":51,"column_end":65},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43121,"byte_end":43135,"line_start":434,"line_end":434,"column_start":68,"column_end":82},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43313,"byte_end":43327,"line_start":441,"line_end":441,"column_start":50,"column_end":64},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43513,"byte_end":43527,"line_start":448,"line_end":448,"column_start":74,"column_end":88},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":43879,"byte_end":43896,"line_start":457,"line_end":457,"column_start":37,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45544,"byte_end":45563,"line_start":514,"line_end":514,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":45646,"byte_end":45665,"line_start":518,"line_end":518,"column_start":65,"column_end":84},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":48223,"byte_end":48242,"line_start":596,"line_end":596,"column_start":5,"column_end":24},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50337,"byte_end":50356,"line_start":653,"line_end":653,"column_start":9,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50566,"byte_end":50585,"line_start":663,"line_end":663,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":50875,"byte_end":50894,"line_start":675,"line_end":675,"column_start":9,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":51118,"byte_end":51137,"line_start":683,"line_end":683,"column_start":9,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52153,"byte_end":52178,"line_start":711,"line_end":711,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":52265,"byte_end":52290,"line_start":716,"line_end":716,"column_start":5,"column_end":30},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":54162,"byte_end":54187,"line_start":773,"line_end":773,"column_start":5,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":55260,"byte_end":55285,"line_start":798,"line_end":798,"column_start":9,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":55481,"byte_end":55506,"line_start":808,"line_end":808,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":55794,"byte_end":55819,"line_start":820,"line_end":820,"column_start":9,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/remutex.rs","byte_start":56043,"byte_end":56068,"line_start":828,"line_end":828,"column_start":9,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":59508,"byte_end":59517,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61193,"byte_end":61202,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":473}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":61757,"byte_end":61766,"line_start":148,"line_end":148,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":62886,"byte_end":62895,"line_start":175,"line_end":175,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":482}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63285,"byte_end":63303,"line_start":184,"line_end":184,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":482},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":63306,"byte_end":63320,"line_start":184,"line_end":184,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":475},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":64088,"byte_end":64097,"line_start":200,"line_end":200,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":488}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65146,"byte_end":65162,"line_start":232,"line_end":232,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":488},"to":{"krate":0,"index":494}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":65165,"byte_end":65178,"line_start":232,"line_end":232,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":468},"to":{"krate":0,"index":494}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66107,"byte_end":66123,"line_start":257,"line_end":257,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":488},"to":{"krate":0,"index":497}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66126,"byte_end":66144,"line_start":257,"line_end":257,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":497}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66744,"byte_end":66760,"line_start":275,"line_end":275,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":488},"to":{"krate":0,"index":500}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":66763,"byte_end":66777,"line_start":275,"line_end":275,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":475},"to":{"krate":0,"index":500}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69145,"byte_end":69151,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":1927}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69228,"byte_end":69234,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":69267,"byte_end":69273,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70005,"byte_end":70011,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":70435,"byte_end":70441,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":76321,"byte_end":76327,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":77666,"byte_end":77672,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":80254,"byte_end":80260,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":82077,"byte_end":82083,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":83666,"byte_end":83672,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":85313,"byte_end":85319,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86751,"byte_end":86757,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":86898,"byte_end":86904,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":1845}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87053,"byte_end":87059,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":87349,"byte_end":87366,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":585},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88051,"byte_end":88066,"line_start":878,"line_end":878,"column_start":68,"column_end":83},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":88125,"byte_end":88140,"line_start":880,"line_end":880,"column_start":45,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":90657,"byte_end":90672,"line_start":956,"line_end":956,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92796,"byte_end":92811,"line_start":1011,"line_end":1011,"column_start":55,"column_end":70},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":92993,"byte_end":93008,"line_start":1019,"line_end":1019,"column_start":54,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93279,"byte_end":93294,"line_start":1029,"line_end":1029,"column_start":73,"column_end":88},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":93495,"byte_end":93510,"line_start":1036,"line_end":1036,"column_start":9,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94113,"byte_end":94129,"line_start":1054,"line_end":1054,"column_start":68,"column_end":84},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":94188,"byte_end":94204,"line_start":1056,"line_end":1056,"column_start":45,"column_end":61},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":96701,"byte_end":96717,"line_start":1130,"line_end":1130,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":97475,"byte_end":97491,"line_start":1151,"line_end":1151,"column_start":61,"column_end":77},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":98297,"byte_end":98313,"line_start":1172,"line_end":1172,"column_start":49,"column_end":65},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100466,"byte_end":100482,"line_start":1227,"line_end":1227,"column_start":55,"column_end":71},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100668,"byte_end":100684,"line_start":1235,"line_end":1235,"column_start":58,"column_end":74},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":2111}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":100861,"byte_end":100877,"line_start":1242,"line_end":1242,"column_start":54,"column_end":70},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101156,"byte_end":101172,"line_start":1252,"line_end":1252,"column_start":73,"column_end":89},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":101373,"byte_end":101389,"line_start":1259,"line_end":1259,"column_start":9,"column_end":25},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102016,"byte_end":102041,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":102108,"byte_end":102133,"line_start":1282,"line_end":1282,"column_start":52,"column_end":77},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":104017,"byte_end":104042,"line_start":1338,"line_end":1338,"column_start":56,"column_end":81},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":106254,"byte_end":106279,"line_start":1393,"line_end":1393,"column_start":61,"column_end":86},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":107085,"byte_end":107110,"line_start":1415,"line_end":1415,"column_start":57,"column_end":82},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108691,"byte_end":108716,"line_start":1462,"line_end":1462,"column_start":62,"column_end":87},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":108905,"byte_end":108930,"line_start":1470,"line_end":1470,"column_start":61,"column_end":86},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109231,"byte_end":109256,"line_start":1481,"line_end":1481,"column_start":9,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":109464,"byte_end":109489,"line_start":1489,"line_end":1489,"column_start":9,"column_end":34},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110397,"byte_end":110418,"line_start":1516,"line_end":1516,"column_start":68,"column_end":89},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110492,"byte_end":110513,"line_start":1517,"line_end":1517,"column_start":61,"column_end":82},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":1927}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":110604,"byte_end":110625,"line_start":1522,"line_end":1522,"column_start":45,"column_end":66},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":112398,"byte_end":112419,"line_start":1574,"line_end":1574,"column_start":49,"column_end":70},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113491,"byte_end":113512,"line_start":1597,"line_end":1597,"column_start":55,"column_end":76},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113681,"byte_end":113702,"line_start":1605,"line_end":1605,"column_start":54,"column_end":75},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":113975,"byte_end":113996,"line_start":1616,"line_end":1616,"column_start":9,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":114197,"byte_end":114218,"line_start":1624,"line_end":1624,"column_start":9,"column_end":30},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":6208}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115126,"byte_end":115148,"line_start":1652,"line_end":1652,"column_start":9,"column_end":31},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":1939}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115223,"byte_end":115245,"line_start":1655,"line_end":1655,"column_start":61,"column_end":83},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":1927}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":115336,"byte_end":115358,"line_start":1660,"line_end":1660,"column_start":45,"column_end":67},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":117165,"byte_end":117187,"line_start":1712,"line_end":1712,"column_start":49,"column_end":71},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118268,"byte_end":118290,"line_start":1735,"line_end":1735,"column_start":55,"column_end":77},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118463,"byte_end":118485,"line_start":1743,"line_end":1743,"column_start":58,"column_end":80},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":2111}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118649,"byte_end":118671,"line_start":1750,"line_end":1750,"column_start":54,"column_end":76},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":2122}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":118952,"byte_end":118974,"line_start":1761,"line_end":1761,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":6203}},{"span":{"file_name":"/home/gorta/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.1/src/rwlock.rs","byte_start":119175,"byte_end":119197,"line_start":1769,"line_end":1769,"column_start":9,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":6208}}]}